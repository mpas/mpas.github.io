<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CodeVerse</title>
    <link>http://mpas.github.io/post/</link>
    <description>Recent content in Posts on CodeVerse</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 19 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mpas.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>Functional Rest API Testing with Grails/Rest Client Builder</title>
            <link>http://mpas.github.io/blog/2015/11/19/functional-rest-api-testing-with-grails/rest-client-builder/</link>
            <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/11/19/functional-rest-api-testing-with-grails/rest-client-builder/</guid>
            <description>&lt;p&gt;Functional Rest API testing with Grails is easy and fun. We will be creating a simple Rest Controller and test it using Spock and Rest Client Builder.&lt;/p&gt;

&lt;p&gt;When running the functional test a real container will be started on a specific port and tests are run against the running container. Just as it should be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt;&lt;br&gt;
Performing a GET request on a url (&lt;a href=&#34;http://localhost:8080/helloworld&#34;&gt;http://localhost:8080/helloworld&lt;/a&gt;) should return a &lt;code&gt;HTTP Status 200&lt;/code&gt; and data with a json payload &lt;code&gt;{&amp;quot;message&amp;quot;:&amp;quot;helloworld&amp;quot;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So lets get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Grails application&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grails create-app RestHelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update your &lt;code&gt;build.gradle&lt;/code&gt; to include the Rest Client Builder dependencies which we will need later on&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
    // add the following line to the &#39;dependencies&#39; section
    testCompile &amp;quot;org.grails:grails-datastore-rest-client:4.0.7.RELEASE&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Create an Integration Test&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grails create-integration-test HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Create a test method inside the integration test&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open up the created HelloWorldControllerSpec inside the &lt;code&gt;/src/integration-test/groovy/resthelloworld/&lt;/code&gt; package&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package resthelloworld

import grails.test.mixin.integration.Integration
import grails.transaction.*
import spock.lang.*
import grails.plugins.rest.client.RestBuilder
import grails.plugins.rest.client.RestResponse

@Integration
@Rollback
class HelloWorldSpec extends Specification {

    def setup() { 
    }

    def cleanup() { 
    }

    def &amp;quot;Ask for a nice HelloWorld&amp;quot;() {
        given:
        RestBuilder rest = new RestBuilder()

        when:
        RestResponse response = rest.get(&amp;quot;http://localhost:8080/helloworld/&amp;quot;)

        then:
        response.status == 200

        and:
        response.json.message == &amp;quot;helloworld&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Run your test&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grails test-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Offcourse this will fail as we do not have implement the controller yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Rest controller&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd RestHelloWorld
$ grails create-controller HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The generation of the controller also create a Unit Test for the controller, default this test will fail. We are going to delete the generated Unit Test as we do not need it now. This test is located under the &lt;code&gt;/src/test/&lt;/code&gt; groovy package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ rm ./src/test/groovy/resthelloworld/HelloWorldControllerSpec.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Implement the controller function that will return data&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package resthelloworld

class HelloWorldController {

    def index() {
        render(status: 200, contentType: &amp;quot;application/json&amp;quot;) {
            [&amp;quot;message&amp;quot; : &amp;quot;helloworld&amp;quot;]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Modify UrlMapping&lt;/strong&gt;
In order to get our newly generated controller accesible via Rest we need to modify our UrlMappings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class UrlMappings {

    static mappings = {
        &amp;quot;/$controller/$action?/$id?(.$format)?&amp;quot;{
            constraints {
                // apply constraints here
            }
        }

        &amp;quot;/&amp;quot;(view:&amp;quot;/index&amp;quot;)
        &amp;quot;500&amp;quot;(view:&#39;/error&#39;)
        &amp;quot;404&amp;quot;(view:&#39;/notFound&#39;)

        // add the line below
        &amp;quot;/helloworld/&amp;quot;  (controller: &amp;quot;helloWorld&amp;quot;, action: &amp;quot;index&amp;quot;, method: &amp;quot;GET&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Test your app&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grails test-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should find that your tests are fine now :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grails test-app
BUILD SUCCESSFUL

Total time: 2.054 secs
| Tests PASSED
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Using DavMail Gateway as a mail proxy for Microsoft Exchange (OWA)</title>
            <link>http://mpas.github.io/blog/2015/11/17/using-davmail-gateway-as-a-mail-proxy-for-microsoft-exchange-owa/</link>
            <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/11/17/using-davmail-gateway-as-a-mail-proxy-for-microsoft-exchange-owa/</guid>
            <description>

&lt;p&gt;If you find yourself into a situation where you have a need for non Microsoft mail client that needs support for Microsoft Exchange then you are often out of luck. In my case I needed Exchange support for the terrific &lt;a href=&#34;http://www.postbox-inc.com&#34;&gt;PostBox&lt;/a&gt; mail client.&lt;/p&gt;

&lt;p&gt;As for now PostBox does not support Microsoft Exhange natively so the hunt starts on how to get Exchange working. As it stands most companies also enable Exchange Web Access (or Outlook Web Access [OWA]) so maybe we can use that to feed our native mail client.&lt;/p&gt;

&lt;p&gt;Enter the use of &lt;a href=&#34;http://davmail.sourceforge.net/&#34;&gt;DavMail&lt;/a&gt;!&lt;/p&gt;

&lt;h4 id=&#34;davmail-gateway:ac833d132ae827d5f416733bf8613037&#34;&gt;Davmail Gateway&lt;/h4&gt;

&lt;p&gt;Davmail is a local mail proxy that can work together with Microsoft Exchange [OWA] in a way that DavMail is actually connecting to a Exchange OWA and your mail client connects to DavMail as a proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mpas.github.io/images/201511/davmail-sequence.png&#34; width=&#34;800&#34; class=&#34;postimage&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;configure-davmail:ac833d132ae827d5f416733bf8613037&#34;&gt;Configure Davmail&lt;/h4&gt;

&lt;p&gt;In order to get DavMail working correctly you need to provide the correct settings so it can use the OWA endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mpas.github.io/images/201511/davmail-settings-main.png&#34; width=&#34;800&#34; class=&#34;postimage&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;configure-postbox:ac833d132ae827d5f416733bf8613037&#34;&gt;Configure PostBox&lt;/h4&gt;

&lt;p&gt;In order to get PostBox working with DavMail you need to create an outgoing mail server and an account that will use that outgoing mailserver.&lt;/p&gt;

&lt;h4 id=&#34;configure-postbox-outgoing-mailserver:ac833d132ae827d5f416733bf8613037&#34;&gt;Configure PostBox - Outgoing mailserver&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://mpas.github.io/images/201511/postbox-outgoing-mailserver.png&#34; width=&#34;400&#34; class=&#34;postimage&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;configure-postbox-account-setup:ac833d132ae827d5f416733bf8613037&#34;&gt;Configure PostBox - Account setup&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://mpas.github.io/images/201511/postbox-account-setup.png&#34; width=&#34;800&#34; class=&#34;center&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;configure-postbox-identity-setup:ac833d132ae827d5f416733bf8613037&#34;&gt;Configure PostBox - Identity setup&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://mpas.github.io/images/201511/postbox-identity-setup.png&#34; width=&#34;800&#34; class=&#34;center&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now you are ready to send mail using your PostBox Client using DavMail and OWA.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
      
    
      
        
          <item>
            <title>Cleaning Grails Domain Objects in a Spock Test</title>
            <link>http://mpas.github.io/blog/2015/10/30/cleaning-grails-domain-objects-in-a-spock-test/</link>
            <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/10/30/cleaning-grails-domain-objects-in-a-spock-test/</guid>
            <description>&lt;p&gt;Spock is a nice framework to execute integration tests in your Grails application. It may happen that the Spock test actually creates some domain objects and you want to clean them out on everuy single run of your feature test methods.&lt;/p&gt;

&lt;p&gt;Spock provides a &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;cleanup()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;When you want to remove your domain objects after each feature test has run you can execute the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def setup() { ... }

def cleanup() {
        // make sure to clear out the database on after test
        &amp;lt;YourDomainObject&amp;gt;.withNewSession {
            &amp;lt;YourDomainObject&amp;gt;.findAll().each { it.delete(flush: true) }
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need the &lt;code&gt;.withNewSession&lt;/code&gt; because there is no Hibernate session provided in the &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;cleanup()&lt;/code&gt; methods.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Adding WebSocket/Stomp support to a Spring Boot application</title>
            <link>http://mpas.github.io/blog/2015/06/16/adding-websocket/stomp-support-to-a-spring-boot-application/</link>
            <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/06/16/adding-websocket/stomp-support-to-a-spring-boot-application/</guid>
            <description>&lt;p&gt;Adding support for &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSockets&lt;/a&gt; / &lt;a href=&#34;https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol&#34;&gt;Stomp&lt;/a&gt; in a &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; application has never been more easy. You can use WebSockets to receive serverside events or push data to the server using WebSockets.&lt;/p&gt;

&lt;p&gt;The following example will enable a server to send messages to a WebSocket/Stomp client.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify &lt;code&gt;build.gradle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
    compile(&amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;)
    compile(&amp;quot;org.springframework.boot:spring-boot-starter-websocket&amp;quot;)
    compile(&amp;quot;org.springframework:spring-messaging&amp;quot;)
    testCompile(&amp;quot;junit:junit&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create a WebSocket configuration class that holds the configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        // the endpoint for websocket connections
        registry.addEndpoint(&amp;quot;/stomp&amp;quot;).withSockJS();
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        // use the /topic prefix for outgoing WebSocket communication
        config.enableSimpleBroker(&amp;quot;/topic&amp;quot;);

        // use the /app prefix for others
        config.setApplicationDestinationPrefixes(&amp;quot;/app&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now a client that connects to &lt;code&gt;/stomp&lt;/code&gt; endpoint is able to receive WebSocket messages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a service that is going to send the data to a WebSocket endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class ScheduleTask {

    @Autowired
    private SimpMessagingTemplate template;

    // this will send a message to an endpoint on which a client can subscribe
    @Scheduled(fixedRate = 5000)
    public void trigger() {
        // sends the message to /topic/message
        this.template.convertAndSend(&amp;quot;/topic/message&amp;quot;, &amp;quot;Date: &amp;quot; + new Date());
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create a client that is able to receive the message&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;WebSocket Stomp Receiving Example&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h3&amp;gt;Messages:&amp;lt;/h3&amp;gt;
        &amp;lt;ol id=&amp;quot;messages&amp;quot;&amp;gt;&amp;lt;/ol&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.jsdelivr.net/jquery/1.11.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        $(document).ready(function() {
            var messageList = $(&amp;quot;#messages&amp;quot;);

            // defined a connection to a new socket endpoint
            var socket = new SockJS(&#39;/stomp&#39;);

            var stompClient = Stomp.over(socket);

            stompClient.connect({ }, function(frame) {
                // subscribe to the /topic/message endpoint
                stompClient.subscribe(&amp;quot;/topic/message&amp;quot;, function(data) {
                    var message = data.body;
                    messageList.append(&amp;quot;&amp;lt;li&amp;gt;&amp;quot; + message + &amp;quot;&amp;lt;/li&amp;gt;&amp;quot;);
                });
            });
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The whole example project  can be downloaded &lt;a href=&#34;https://github.com/mpas/spring-boot-websocket-stomp-server-send-example&#34;&gt;https://github.com/mpas/spring-boot-websocket-stomp-server-send-example&lt;/a&gt;&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Run a Grails 3 generated Fat Jar file in production mode</title>
            <link>http://mpas.github.io/blog/2015/06/11/run-a-grails-3-generated-fat-jar-file-in-production-mode/</link>
            <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/06/11/run-a-grails-3-generated-fat-jar-file-in-production-mode/</guid>
            <description>&lt;p&gt;When creating a Grails WAR/JAR file using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grails war
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting artifact can be run in production mode using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -Dgrails.env=prod -Dserver.port=9000 -jar &amp;lt;name-of-jar-file&amp;gt;.jar
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Setting up Docker RabbitMQ with predefined users/vhosts</title>
            <link>http://mpas.github.io/blog/2015/06/11/setting-up-docker-rabbitmq-with-predefined-users/vhosts/</link>
            <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/06/11/setting-up-docker-rabbitmq-with-predefined-users/vhosts/</guid>
            <description>&lt;p&gt;When creating an Docker image it is nice to have predefined users and vhosts without manually having to create them after the Docker RabbitMQ image has started.&lt;/p&gt;

&lt;p&gt;The following is a Dockerfile that extends the default Docker RabbitMQ image including the Management Plugin and it creates a standard set of users / vhosts when the container is created from the image.&lt;/p&gt;

&lt;p&gt;It involves a init.sh script that is used to create the users and vhosts.&lt;/p&gt;

&lt;p&gt;The Docker File&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM rabbitmq:3-management

# Add script to create default users / vhosts
ADD init.sh /init.sh

# Set correct executable permissions
RUN chmod +x /init.sh

# Define default command
CMD [&amp;quot;/init.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The init.sh script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

# Create Default RabbitMQ setup
( sleep 10 ; \

# Create users
# rabbitmqctl add_user &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;
rabbitmqctl add_user test_user test_user ; \

# Set user rights
# rabbitmqctl set_user_tags &amp;lt;username&amp;gt; &amp;lt;tag&amp;gt;
rabbitmqctl set_user_tags test_user administrator ; \

# Create vhosts
# rabbitmqctl add_vhost &amp;lt;vhostname&amp;gt;
rabbitmqctl add_vhost dummy ; \

# Set vhost permissions
# rabbitmqctl set_permissions -p &amp;lt;vhostname&amp;gt; &amp;lt;username&amp;gt; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
rabbitmqctl set_permissions -p dummy test_user &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; ; \
) &amp;amp;    
rabbitmq-server $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Place both of these files in a directory and build your image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t my_rabbitmq_image .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start a container based on the image using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm=true --name my_rabbitmq_container -p 5672:5672 -p 15672:15672  my_rabbitmq_image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in your browser navigate to &lt;a href=&#34;http://localhost:15672&#34;&gt;http://localhost:15672&lt;/a&gt; and see if all is ok!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using Boot2Docker make sure to replace the localhost with the correct IP.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>HTTPServletRequestWrapper for ServletInputStream 3.1</title>
            <link>http://mpas.github.io/blog/2015/06/10/httpservletrequestwrapper-for-servletinputstream-3.1/</link>
            <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/06/10/httpservletrequestwrapper-for-servletinputstream-3.1/</guid>
            <description>&lt;p&gt;A HttpServletRequestWrapper may be handy if you want to be able to read the HTTP Body multi times after you consume it in a filter. The ServletInputStream 3.1 changed a bit and the following methods have to be implemented.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isFinished&lt;/li&gt;
&lt;li&gt;isReady&lt;/li&gt;
&lt;li&gt;setReadListener&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;import com.google.common.primitives.Bytes;
import javax.servlet.ReadListener;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

public class AuthenticationRequestWrapper extends HttpServletRequestWrapper {

    // tag::variables[]
    private byte[] requestBody = new byte[0];
    private boolean bufferFilled = false;
    // end::variables[]

    /**
     - Constructs a request object wrapping the given request.
     *
     - @param request The request to wrap
     - @throws IllegalArgumentException if the request is null
     */
    public AuthenticationRequestWrapper(HttpServletRequest request) {
        super(request);
    }


    // tag::getRequestBody[]
    public byte[] getRequestBody() throws IOException {
        if (bufferFilled) {
            return Arrays.copyOf(requestBody, requestBody.length);
        }

        InputStream inputStream = super.getInputStream();

        byte[] buffer = new byte[102400]; // 100kb buffer

        int bytesRead;
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            requestBody = Bytes.concat(this.requestBody, Arrays.copyOfRange(buffer, 0, bytesRead)); // &amp;lt;1&amp;gt;
        }

        bufferFilled = true;

        return requestBody;
    }
    // end::getRequestBody[]

    // tag::getInputStream[]
    @Override
    public ServletInputStream getInputStream() throws IOException {
        return new CustomServletInputStream(getRequestBody()); // &amp;lt;1&amp;gt;
    }
    // end::getInputStream[]

    private static class CustomServletInputStream extends ServletInputStream {

        private ByteArrayInputStream buffer;

        public CustomServletInputStream(byte[] contents) {
            this.buffer = new ByteArrayInputStream(contents);
        }

        @Override
        public int read() throws IOException {
            return buffer.read();
        }

        @Override
        public boolean isFinished() {
            return buffer.available() == 0;
        }

        @Override
        public boolean isReady() {
            return true;
        }

        @Override
        public void setReadListener(ReadListener listener) {
            throw new RuntimeException(&amp;quot;Not implemented&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Installing Docker Registry 2.0.1 using self signed certificates</title>
            <link>http://mpas.github.io/blog/2015/06/05/installing-docker-registry-2.0.1-using-self-signed-certificates/</link>
            <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/06/05/installing-docker-registry-2.0.1-using-self-signed-certificates/</guid>
            <description>

&lt;p&gt;The new Docker Registry (2.x) has just been released and is rewritten in Go. The default installation now requires SSL security and I was looking for a way to secure the Registry using a NGINX SSL proxy where users need to provide username/password to access the registry. The setup of the NGINX proxy can be done manually but i decided to see if i can reuse the excellent images from Container Solutions to ease the installation.&lt;/p&gt;

&lt;p&gt;So the setup will be that we install the Docker Registry and proxy the SSL user access via self signed certificates using an NGINX proxy image provided by Container Solutions. &lt;a href=&#34;http://container-solutions.com/2015/04/running-secured-docker-registry-2-0/&#34;&gt;Check here for more information&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Installation of the remote docker registry will be done by using on an Amazon EC2 (Linux AMI). Currently the free tier Amazon Linux AMI 2015.03 (HVM), SSD Volume Type - ami-a10897d6. So spin up the Amazon AMI and let&amp;rsquo;s install Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when you spin up your Amazon AMI make sure to remember the FQDN/DNS name! We need this name to generate the SSL certificates!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Example:
&amp;lt;domain-name&amp;gt; = ec2-52-16-247-220.eu-west-1.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So spin up your AMI and install Docker!&lt;/p&gt;

&lt;h2 id=&#34;installing-docker:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Installing docker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;login into your Amazon AMI&lt;/li&gt;

&lt;li&gt;&lt;p&gt;update the system and install Docker&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum update -y
$ sudo wget -qO- https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add the ec2-user to the &lt;code&gt;docker&lt;/code&gt; group (optional)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo usermod -aG docker ec2-user
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;start Docker&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service docker start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make sure Docker can run the basic &amp;ldquo;hello-world&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-docker-registry-data-and-configuration-directories:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Create Docker Registry data and configuration directories&lt;/h2&gt;

&lt;p&gt;We are going to store the registry image data inside &lt;code&gt;/opt/docker/registry/data&lt;/code&gt; and configuration files such as the ssl certificates and user login inside &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create data folders for Docker Registry data and configuration&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir -p /opt/docker/registry/data
$ sudo mkdir -p /opt/docker/registry/conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;run-the-docker-registry:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Run the Docker Registry&lt;/h2&gt;

&lt;p&gt;Now we are able to run the Docker Registry, the data for images that will be pushed are going to be stored in &lt;code&gt;/opt/docker/registry/data&lt;/code&gt; and the container will be named &lt;code&gt;docker-registry&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;run the registry and name it &lt;code&gt;docker-registry&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker run -d -v /opt/docker/registry/data:/tmp/registry-dev \
--name docker-registry registry:2.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;test if the registry is actually running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So now we have a running Docker Registry, but still no SSL proxy and no user accounts to get access to the registry.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;generate-self-signed-certificates-for-our-ssl-proxy:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Generate self signed certificates for our SSL proxy&lt;/h2&gt;

&lt;p&gt;The result of the certificate generation will be placed in &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt; and named &lt;code&gt;docker-registry.crt&lt;/code&gt; and &lt;code&gt;docker-registry.key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;docker-registry.crt&lt;/code&gt; file is important, we will need this later on to configure our local Docker client on the machine that is going to access the remote registry. So after generating the &lt;code&gt;docker-registry.crt&lt;/code&gt; file, grab this and store it on your local machine in a place where you can find it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;generate the certificates&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \ 
-keyout /opt/docker/registry/conf/docker-registry.key \
-out /opt/docker/registry/conf/docker-registry.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accept all defaults and make sure you give the correct FQDN /DNS name = &lt;code&gt;&amp;lt;domain-name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-passwords-for-access-to-the-docker-registry:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Create passwords for access to the Docker Registry&lt;/h2&gt;

&lt;p&gt;In order to let users login into the registry we need to create users  (user1/user2). This will be done by using &lt;code&gt;htpasswd&lt;/code&gt;. The user data will be stored in &lt;code&gt;docker-registry.htpasswd&lt;/code&gt; file and placed in the &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt; directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;install htpasswd&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install httpd-tools -y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create the users&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo htpasswd -c /opt/docker/registry/conf/docker-registry.htpasswd user1
$ sudo htpasswd /opt/docker/registry/conf/docker-registry.htpasswd user2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when creating the second user omit the &lt;code&gt;-c&lt;/code&gt; otherwise the docker-registry.htpasswd file will be get overwritten!&lt;/p&gt;

&lt;h2 id=&#34;run-the-nginx-proxy:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Run the NGINX Proxy&lt;/h2&gt;

&lt;p&gt;As mentioned we are going to use the image from &lt;a href=&#34;http://container-solutions.com/2015/04/running-secured-docker-registry-2-0/&#34;&gt;Container Solutions&lt;/a&gt; to run our NGINX proxy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;start the NGINX proxy and name it &lt;code&gt;docker-registry-proxy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker run -d -p 443:443  \
-e REGISTRY_HOST=&amp;quot;docker-registry&amp;quot; -e REGISTRY_PORT=&amp;quot;5000&amp;quot; -e SERVER_NAME=&amp;quot;localhost&amp;quot; \
--link docker-registry:docker-registry \ 
-v /opt/docker/registry/conf/docker-registry.htpasswd:/etc/nginx/.htpasswd:ro \
-v /opt/docker/registry/conf:/etc/nginx/ssl:ro \ 
--name docker-registry-proxy containersol/docker-registry-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After this step we have a running Docker Registry which is secured using Self Signed certificates and users are able to login using their username/password.&lt;/p&gt;

&lt;p&gt;To test this navigate to your registry by using a browser (Chrome) and access: &lt;code&gt;https://&amp;lt;domain-name&amp;gt;:443/v2/&lt;/code&gt;. After accepting the security warning provide a username/password and the output should be &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configure-the-local-docker-client:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Configure the local Docker client&lt;/h2&gt;

&lt;p&gt;Now that we have a running secured Docker Registry we can configure the Docker client on our machine that is going to access the remote Registry. For this we need a copy of the earlier &lt;code&gt;docker-registry.crt&lt;/code&gt; file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copy the &lt;code&gt;docker-registry.crt&lt;/code&gt; file from our server to your local machine. This file is located in &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt;. Put the copy in a place where you can find it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ubuntu-docker-client:ab1188eade750d80f5d5f89b3d4b29c6&#34;&gt;Ubuntu Docker Client&lt;/h3&gt;

&lt;p&gt;In order to get the local client working, we need to install Docker and register the &lt;code&gt;docker-registry.crt&lt;/code&gt; certificate file!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;install docker&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo wget -qO- https://get.docker.com/ | sh
$ sudo service docker start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create a directory holding our extra certificates&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /usr/share/ca-certificates/extra
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;copy the &lt;code&gt;docker-registry.crt&lt;/code&gt; file to the directory &lt;code&gt;/usr/share/ca-certificates/extra&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;register the certificate&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dpkg-reconfigure ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you are almost ready!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;restart the local Docker client&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;login onto your remote registry using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker login &amp;lt;domain-name&amp;gt;:port
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have a remote Docker Registry and the Docker Client is able to connect!&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Upgrading from Grails 2.3.8 to 2.4.2</title>
            <link>http://mpas.github.io/blog/2014/07/04/upgrading-from-grails-2.3.8-to-2.4.2/</link>
            <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2014/07/04/upgrading-from-grails-2.3.8-to-2.4.2/</guid>
            <description>&lt;p&gt;When upgrading to Grails 2.4.2 i ran into an issue where the following error message would pop up.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&amp;lt;p&amp;gt;Error creating bean with name ‘grailsApplication’ defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean ‘grailsResourceLoader’ while setting bean property ‘grailsResourceLoader’;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To solve this issue you need to delete some lines in the &lt;code&gt;&amp;lt;grails-app&amp;gt;/web-app/WEB-INF/applicationContext.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Delete the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;grailsResourceLoader&amp;quot; ref=&amp;quot;grailsResourceLoader&amp;quot; /&amp;gt;

&amp;lt;bean id=&amp;quot;grailsResourceLoader&amp;quot; class=&amp;quot;org.codehaus.groovy.grails.commons.GrailsResourceLoaderFactoryBean&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should be up and running quickly.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Skip a contenttype/section to be renderend</title>
            <link>http://mpas.github.io/blog/2014/06/09/skip-a-contenttype/section-to-be-renderend/</link>
            <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2014/06/09/skip-a-contenttype/section-to-be-renderend/</guid>
            <description>&lt;p&gt;When creating a layout it may occur that you want to skip rendering certain types of content, or render only specific content in a part of your layout.&lt;/p&gt;

&lt;p&gt;Example:
You want to only render contenttype &amp;lsquo;post&amp;rsquo;  use the following code in your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq .Type &amp;quot;post&amp;quot; }} 

    {{ .Title }}
    {{ .Content }}

{{ end }}
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Bookreview : Instant Vert.x</title>
            <link>http://mpas.github.io/blog/2013/11/27/bookreview--instant-vert.x/</link>
            <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2013/11/27/bookreview--instant-vert.x/</guid>
            <description>&lt;p&gt;For those who have not yet got into contact with &lt;a href=&#34;http://vertx.io/&#34;&gt;Vert.x&lt;/a&gt;, the book &lt;a href=&#34;http://www.packtpub.com/development-of-asynchronous-network-applications-using-vertx/book&#34;&gt;Instant Vert.x&lt;/a&gt; (54 pages in total of which 40 pages are “real” content) is a nice introduction to the underlying concepts.&lt;/p&gt;

&lt;p&gt;As the name suggests, you can read the book in &amp;ldquo;an instant&amp;rdquo; and takes the reader through all high level concepts. The information in the book mostly stays at the concept level and provides some basic usage examples.&lt;/p&gt;

&lt;p&gt;For those who have not yet had the opportunity to learn about Vert.x, I would not immediately recommend this book. The online documentation section on Vertx.io contains the same information. But if you like a book with information nicely put into digestible chapters then this book is a good fit.&lt;/p&gt;

&lt;p&gt;Personally i hoped to get some more technical information and how-to information from this book but it is really targeted towards people that are just starting or have a beginning interest in Vert.x.&lt;/p&gt;

&lt;p&gt;Overall, I really liked the compactness and pace of the book. It is an easy read and you quickly gain knowledge on the high level concepts of Vert.x. While noted earlier you can get the information also on Vertx.io website or other places, it&amp;rsquo;s is nice to have all information aggregated in one place. This book is a good start in your journey to learn about Vert.x.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vertx.io/&#34;&gt;Go to the Vert.x website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.packtpub.com/development-of-asynchronous-network-applications-using-vertx/book&#34;&gt;Get the book at Pack Publishing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Use backspace key to go back in Google Chrome</title>
            <link>http://mpas.github.io/blog/2013/05/30/use-backspace-key-to-go-back-in-google-chrome/</link>
            <pubDate>Thu, 30 May 2013 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2013/05/30/use-backspace-key-to-go-back-in-google-chrome/</guid>
            <description>&lt;p&gt;When using Chrome (in Linux Mint) and pressing the backspace key nothing happens. You would expect to go back to the previous url you have visited. To enable the default behaviour you could install the following extension:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/backspace-as-backforward/aeffggjddcchloadflonilaahpclmbnm?hl=en&#34;&gt;https://chrome.google.com/webstore/detail/backspace-as-backforward/aeffggjddcchloadflonilaahpclmbnm?hl=en&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Automount NTFS volume under Linux (Mint)</title>
            <link>http://mpas.github.io/blog/2013/05/28/automount-ntfs-volume-under-linux-mint/</link>
            <pubDate>Tue, 28 May 2013 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2013/05/28/automount-ntfs-volume-under-linux-mint/</guid>
            <description>&lt;p&gt;When automounting an NTFS volume under Linux (Mint) you can do this using the /etc/fstab file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo pico /etc/fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a line in the /etc/fstab file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# custom mount point
/dev/sdb1 /media/windows-c ntfs-3g defaults 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And take the mount into effect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mount -a
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Using Grails to power your Electric Car</title>
            <link>http://mpas.github.io/blog/2013/05/25/using-grails-to-power-your-electric-car/</link>
            <pubDate>Sat, 25 May 2013 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2013/05/25/using-grails-to-power-your-electric-car/</guid>
            <description>&lt;p&gt;Past week I really enjoyed visiting &amp;amp; speaking at the &lt;a href=&#34;http://gr8conf.org/&#34;&gt;Grails Conference (GR8Conf 2013)&lt;/a&gt;. The organisation made it possible that for me to host a talk about &amp;ldquo;Using Grails to power your Electric Car&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/mpas/20130523-gr8conf-using-grails-to-power-your-electric-car&#34;&gt;Using Grails to power your Electric Car&lt;/a&gt;&lt;/p&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
