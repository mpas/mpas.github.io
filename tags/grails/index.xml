<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grails on CodeVerse</title>
    <link>http://mpas.github.io/tags/grails/</link>
    <description>Recent content in Grails on CodeVerse</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 04 Jul 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mpas.github.io/tags/grails/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Upgrading from Grails 2.3.8 to 2.4.2</title>
      <link>http://mpas.github.io/post/2014/07/upgrade-grails-2.4.2/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2014/07/upgrade-grails-2.4.2/</guid>
      <description>&lt;p&gt;When upgrading to Grails 2.4.2 i ran into an issue where the following error message would pop up.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&amp;lt;p&amp;gt;Error creating bean with name ‘grailsApplication’ defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean ‘grailsResourceLoader’ while setting bean property ‘grailsResourceLoader’;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To solve this issue you need to delete some lines in the &lt;code&gt;&amp;lt;grails-app&amp;gt;/web-app/WEB-INF/applicationContext.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Delete the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;grailsResourceLoader&amp;quot; ref=&amp;quot;grailsResourceLoader&amp;quot; /&amp;gt;

&amp;lt;bean id=&amp;quot;grailsResourceLoader&amp;quot; class=&amp;quot;org.codehaus.groovy.grails.commons.GrailsResourceLoaderFactoryBean&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should be up and running quickly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Grails to power your Electric Car</title>
      <link>http://mpas.github.io/post/2013/05/grails-to-power-your-electric-car/</link>
      <pubDate>Sat, 25 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2013/05/grails-to-power-your-electric-car/</guid>
      <description>&lt;p&gt;Past week I really enjoyed visiting &amp;amp; speaking at the &lt;a href=&#34;http://gr8conf.org/&#34;&gt;Grails Conference (GR8Conf 2013)&lt;/a&gt;. The organisation made it possible that for me to host a talk about &amp;ldquo;Using Grails to power your Electric Car&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/mpas/20130523-gr8conf-using-grails-to-power-your-electric-car&#34;&gt;Using Grails to power your Electric Car&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grails migrations and &#39;Waiting for changelog lock&#39;</title>
      <link>http://mpas.github.io/post/2013/02/grails-migrations-and-waiting-for-changelog/</link>
      <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2013/02/grails-migrations-and-waiting-for-changelog/</guid>
      <description>&lt;p&gt;Sometimes it may happen that the automatic migrations in a Grails project may come to a hold due to the fact that Liquibase keeps waiting for a changelog lock. At the end this will result in a application that is not going to be deployed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
Waiting for changelog lock....
Waiting for changelog lock....
Waiting for changelog lock....
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To solve this take the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stop the application container (example: Tomcat)&lt;/li&gt;
&lt;li&gt;In the database look for a table called &lt;code&gt;DATABASECHANGELOGLOCK&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the table there is a record with id=1, change the following values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locked -&amp;gt; 0
lockgranted -&amp;gt; null
lockedby -&amp;gt; null
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updating this record start the application container&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;br /&gt;
To see who has locked the database (normally the local machine):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select * from DATABASECHANGELOGLOCK;
To update the record
update DATABASECHANGELOGLOCK 
set locked=0, lockgranted=null, lockedby=null 
where id=1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Testing constraints with Build Test Data</title>
      <link>http://mpas.github.io/post/2013/01/testing-constraints-with-build-test-data/</link>
      <pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2013/01/testing-constraints-with-build-test-data/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://grails.org/plugin/spock&#34;&gt;Spock&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://grails.org/plugin/build-test-data&#34;&gt;Build Test Data&lt;/a&gt; plugins both are wonderful additions to your toolkit if you are creating tests without getting into the hassle of constantly building up your object graph. You can focus on what you want to test!&lt;/p&gt;

&lt;p&gt;When testing constraints on an object it can be used as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo {
    String name   // name of foo
    Integer age   // age of foo

    static constraints = {
     name nullable: false, blank: false // name may never be nullable or blank
     age nullable: true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the Spock test&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Build(Foo)
@TestFor(Foo)
class FooSpec extends Specification {

    def &amp;quot;Name of Foo must exist&amp;quot;() {
        given: &amp;quot;setting up the constraints&amp;quot;
        mockForConstraintsTests(Foo)

        when: &amp;quot;creating a Foo&amp;quot;
        Foo foo = Foo.buildWithoutSave()

        then: &amp;quot;validation should trigger&amp;quot;
        assertFalse foo.validate()

        and: &amp;quot;validation error should be on the value field&amp;quot;
        assert foo.errors.allErrors.first().field == &amp;quot;name&amp;quot;
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loading Grails configuration files update!</title>
      <link>http://mpas.github.io/post/2012/09/grails-load-external-configuration-files-update/</link>
      <pubDate>Mon, 17 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2012/09/grails-load-external-configuration-files-update/</guid>
      <description>&lt;p&gt;We recently changed the way how we load configuration files in a Grails project. Normally we to use the .properties file format, but this has some serious disadvantages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot deal with all Grails Mail settings in the configuration file&lt;/li&gt;
&lt;li&gt;You cannot use the log4j DSL to extract the logging configuration outside your application&lt;/li&gt;
&lt;li&gt;etc..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our hunt for a good way to load configuration files we asked question on the mailinglist and also found this &lt;a href=&#34;http://www.baselogic.com/blog/development/java-javaee-j2ee/getting-grails-external-configuration-working-in-the-real-world/&#34;&gt;blogpost&lt;/a&gt; which was the start for our implementation of loading the external configuration files.&lt;/p&gt;

&lt;p&gt;We modified some small things and added a way of loading a configuration file that is resident in the root of a Grails project. So when developing with IntelliJ for example the config file is at your fingertips in the root of the application project structure. We must also note that we are very happy with the fact that the Grails community was more then helpfull in helping us out here!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// -------------------------------------------------------------------------------- //
// - START: CONFIGURATION FILE LOADING -------------------------------------------- //
// -------------------------------------------------------------------------------- //
// locations to search for config files that get merged into the main config
// config files can either be Java properties files or ConfigSlurper scripts
def ENV_NAME = &amp;quot;${appName}.config.location&amp;quot;
if(!grails.config.locations || !(grails.config.locations instanceof List)) {
    grails.config.locations = []
}
println &amp;quot;--------------------------------------------------------------------------------&amp;quot;
println &amp;quot;- Loading configuration file                                                   -&amp;quot;
println &amp;quot;--------------------------------------------------------------------------------&amp;quot;
// 1: check for environment variable that has been set! This variable must point to the
// configuration file that must be used. Can be a .groovy or .properties file!
if(System.getenv(ENV_NAME) &amp;amp;&amp;amp; new File(System.getenv(ENV_NAME)).exists()) {
    println(&amp;quot;Including System Environment configuration file: &amp;quot; + System.getenv(ENV_NAME))
    grails.config.locations &amp;lt;&amp;lt; &amp;quot;file:&amp;quot; + System.getenv(ENV_NAME)

// 2: check for commandline properties!
// Use it like (examples):
//      grails -D[name of app].config.location=/tmp/[name of config file].groovy run-app
// or
//      grails -D[name of app].config.location=/tmp/[name of config file].properties run-app
//
} else if(System.getProperty(ENV_NAME) &amp;amp;&amp;amp; new File(System.getProperty(ENV_NAME)).exists()) {
    println &amp;quot;Including configuration file specified on command line: &amp;quot; + System.getProperty(ENV_NAME)
    grails.config.locations &amp;lt;&amp;lt; &amp;quot;file:&amp;quot; + System.getProperty(ENV_NAME)

// 3: check on local project config file in the project root directory
} else if (new File(&amp;quot;./${appName}-config.groovy&amp;quot;).exists()) {
    println &amp;quot;*** User defined config: file:./${appName}-config.groovy ***&amp;quot;
    grails.config.locations = [&amp;quot;file:./${appName}-config.groovy&amp;quot;]
} else if (new File(&amp;quot;./${appName}-config.properties&amp;quot;).exists()) {
    println &amp;quot;*** User defined config: file:./${appName}-config.properties ***&amp;quot;
    grails.config.locations = [&amp;quot;file:./${appName}-config.groovy&amp;quot;]

// 4: check on local project config file in ${userHome}/.grails/...
} else if (new File(&amp;quot;${userHome}/.grails/${appName}-config.groovy&amp;quot;).exists()) {
    println &amp;quot;*** User defined config: file:${userHome}/.grails/${appName}-config.groovy ***&amp;quot;
    grails.config.locations = [&amp;quot;file:${userHome}/.grails/${appName}-config.groovy&amp;quot;]
} else if (new File(&amp;quot;${userHome}/.grails/${appName}-config.properties&amp;quot;).exists()) {
    println &amp;quot;*** User defined config: file:${userHome}/.grails/${appName}-config.properties ***&amp;quot;
    grails.config.locations = [&amp;quot;file:${userHome}/.grails/${appName}-config.properties&amp;quot;]

// 5: we have problem!!
} else {
    println &amp;quot;********************************************************************************&amp;quot;
    println &amp;quot;* No external configuration file defined                                       *&amp;quot;
    println &amp;quot;********************************************************************************&amp;quot;
}
println &amp;quot;(*) grails.config.locations = ${grails.config.locations}&amp;quot;
println &amp;quot;--------------------------------------------------------------------------------&amp;quot;
// -------------------------------------------------------------------------------- //
// - END: CONFIGURATION FILE LOADING ---------------------------------------------- //
// -------------------------------------------------------------------------------- //
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loading external Configuration files in a Grails application</title>
      <link>http://mpas.github.io/post/2012/09/grails-load-external-configuration-files/</link>
      <pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2012/09/grails-load-external-configuration-files/</guid>
      <description>&lt;p&gt;The use of &amp;lsquo;Config.groovy&amp;rsquo; as a placeholder for configuration settings is nice, but not always sufficient. The &amp;lsquo;Config.groovy&amp;rsquo; file will get compiled and packaged inside the WAR file you are creating. If you want to externalize the configuration and have a need to configure settings outside the deployed (WAR file) application you can use property files (.properties) to achieve that.&lt;/p&gt;

&lt;p&gt;A simple mechanism to load these property files is to place a short snippet of code in the &amp;lsquo;Config.groovy&amp;rsquo; that will load a specific configuration file from the filesystem, depending on the availability.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grails.config.locations = [&amp;quot;classpath:application-config.properties&amp;quot;, &amp;quot;file:./application-config.properties&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This snippet will first try to load the property file from the classpath and if that fails you have a backup on the filesystem. This opens opportunities to load a different property file during development! When you deploy the application you can place the &amp;lsquo;application-config.properties&amp;rsquo; file inside a folder which is available in the classpath. For Apache Tomcat this would be the &amp;lsquo;lib&amp;rsquo; folder!&lt;/p&gt;

&lt;p&gt;This gives the opportunity to configure the application outside the &amp;lsquo;Config.groovy&amp;rsquo; file so any changes made the the property file will be reflected in your environment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Combining ImageMagick and Grails</title>
      <link>http://mpas.github.io/post/2012/09/grails-and-imagemagick/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2012/09/grails-and-imagemagick/</guid>
      <description>&lt;p&gt;When there is a need to work with images (thumbnailing, watermark, resize etc.) there is always ImageMagick that comes to the rescue. Combining this image utility powerhouse with the Grails framework is a task which can be easily accomplished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install ImageMagick according to the installation instructions.&lt;/li&gt;
&lt;li&gt;It contains a utility called convert which we will need later on! This utility takes care of the conversion of images to thumbnails, watermarks etc. So remember where this utility is installed on your system!&lt;/li&gt;
&lt;li&gt;Make sure that ImageMagick is installed correctly be converting an image to a thumbnail by using the following command in a terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/opt/local/bin/convert &amp;lt;filename&amp;gt; -thumbnail 70x70 &amp;lt;thumbnail-filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/opt/local/bin/convert /tmp/image-001.jpg -thumbnail 70x70 /tmp/thumbnail-image-001.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create some code that calls the ImageMagick convert utility with the correct parameters to enable you to achieve what you want. Something like below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def createThumbnail(File file) {
   def command = &amp;quot;/opt/local/bin/convert ${file.canonicalPath} &amp;quot; +
                 &amp;quot;-thumbnail 70x70 &amp;quot; +
                 &amp;quot;/images/thumbs&amp;quot; + File.separator + &amp;quot;${file.name}&amp;quot;
   def proc = Runtime.getRuntime().exec(command)
   int exitStatus;
   while (true) {
       try {
           exitStatus = proc.waitFor();
           break;
       } catch (java.lang.InterruptedException e) {
           log.debug(&amp;quot;Creating thumbnail - Interrupted: Ignoring and waiting&amp;quot;)
       }
   }
    if (exitStatus != 0) {
        log.error(&amp;quot;Error executing command: exitStatus=[${exitStatus}]&amp;quot;)
    }
    log.debug(&amp;quot;Succesfully created thumbnail&amp;quot;)
    return (exitStatus == 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above should give you some idea on how you could integrate Grails and ImageMagick into your own application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Groovy &amp; Grails</title>
      <link>http://mpas.github.io/post/2012/09/introduction-groovy-and-grails/</link>
      <pubDate>Wed, 12 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2012/09/introduction-groovy-and-grails/</guid>
      <description>&lt;p&gt;Recently i had the opportunity to show an exciting crowd a presentation about &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://www.grails.org/&#34;&gt;Grails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This happend during the &lt;a href=&#34;http://www.devnology.nl/&#34;&gt;Devnology&lt;/a&gt; Community Event at Baarn. If you want to view the presentation &amp;ndash;&amp;gt; &lt;a href=&#34;http://slidesha.re/cfL3eH&#34;&gt;check it out here!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change default homepage for a Grails application</title>
      <link>http://mpas.github.io/post/2012/09/grails-change-default-homepage/</link>
      <pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2012/09/grails-change-default-homepage/</guid>
      <description>&lt;p&gt;You can set the default homepage for a Grails application by modifying the &lt;code&gt;grails-app/conf/UrlMappings.groovy&lt;/code&gt; file. In a new Grails application this file will look like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class UrlMappings {
 static mappings = {
  &amp;quot;/$controller/$action?/$id?&amp;quot;{
   constraints {
    // apply constraints here
   }
  }
  &amp;quot;/&amp;quot;(view:&amp;quot;/index&amp;quot;)
  &amp;quot;500&amp;quot;(view:&#39;/error&#39;)
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/&amp;quot;(view:&amp;quot;/index&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/&amp;quot;(controller:&#39;home&#39;, action:&amp;quot;/index&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result in the fact that when you start your Grails application and you enter the URL for your application it will trigger the &lt;strong&gt;HomeController&lt;/strong&gt; and corresponding &lt;strong&gt;index&lt;/strong&gt; action related to that controller.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using MySQL instead of in-memory database for a Grails application</title>
      <link>http://mpas.github.io/post/2012/09/grails-replace-in-memory-db-with-mysql/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2012/09/grails-replace-in-memory-db-with-mysql/</guid>
      <description>&lt;p&gt;A Grails application by default uses a in-memory HSQL database. To switch to a MySQL database the steps are simple and straightforward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the MySQL JDBC driver [called a connector] from the MySQL website&lt;/li&gt;
&lt;li&gt;Extract the zip or tar archive&lt;/li&gt;
&lt;li&gt;Copy the driver (at this time of writing called &lt;code&gt;mysql-connector-java-5.1.13-bin.jar&lt;/code&gt; into the &lt;code&gt;grails-app/lib&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Configure your application datasource in file &lt;code&gt;grails-app/conf/DataSource.groovy&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;development {
  dataSource {
   dbCreate = &amp;quot;create-drop&amp;quot; // one of &#39;create&#39;, &#39;create-drop&#39;,&#39;update&#39;
   url = &amp;quot;jdbc:mysql://localhost:&amp;lt;port&amp;gt;/&amp;lt;database&amp;gt;&amp;quot;
   driverClassName = &amp;quot;com.mysql.jdbc.Driver&amp;quot;
   port =  // default 3306
   username = &amp;quot;&amp;lt;username&amp;gt;&amp;quot;
   password = &amp;quot;&amp;lt;password&amp;gt;&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>