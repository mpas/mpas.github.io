<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on CodeVerse</title>
    <link>http://mpas.github.io/tags/docker/</link>
    <description>Recent content in Docker on CodeVerse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Nov 2016 19:34:45 +0100</lastBuildDate>
    <atom:link href="http://mpas.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating/Pushing Docker images using Gradle/Groovy without plugins</title>
      <link>http://mpas.github.io/post/2016/11/24/20161124_create_pushing_docker_images_using_gradle_without_plugins/</link>
      <pubDate>Thu, 24 Nov 2016 19:34:45 +0100</pubDate>
      
      <guid>http://mpas.github.io/post/2016/11/24/20161124_create_pushing_docker_images_using_gradle_without_plugins/</guid>
      <description>

&lt;p&gt;In our current project we where heavily focussed on the usage of Gradle plugins to create Docker images. We used plugins to create the images and push them to our AWS ECR repositories. When using these plugins we hit various bugs related to the fact that not all developers where using Linux operating systems to test our their containers. At the end we took a look on how we could create those images without using additional plugins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt; : Docker is installed on your machine.&lt;/p&gt;

&lt;h2 id=&#34;creating-an-image&#34;&gt;Creating an image&lt;/h2&gt;

&lt;p&gt;The following snippet will create a Docker image using the task &lt;code&gt;gradle buildDockerImage&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- application layout
| build.gradle
| &amp;gt; src
| &amp;gt;- main
| &amp;gt;-- docker (contains a Dockerfile)
| &amp;gt;--- app (contains data that can be used in your Dockerfile)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    You can put some logic in the getDockerImageName to determine how your&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    Docker image should be created.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getDockerImageName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    Execute a docker build using commandline pointing to our Dockerfile that&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    has been copied to /build/docker/.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;task&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;buildDockerImage&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;type:Exec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Build a docker image&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;commandLine&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-f&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;build/docker/Dockerfile&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${dockerImageName}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;build/docker&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;doFirst&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;gt;&amp;gt; Creating image: ${dockerImageName}&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;/* copy artifacts from src/main/docker/app into the build/docker/app */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;src/main/docker/app/&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;build/docker/app&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;/* copy Dockerfile from src/main/docker into the build/docker */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;src/main/docker/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Dockerfile&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;build/docker&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;pushing-an-image&#34;&gt;pushing an image&lt;/h2&gt;

&lt;p&gt;Pushing an image without using plugins is just as easy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pushDockerImage&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Push a docker image&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;commandLine&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;push&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${dockerImageName}&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;doFirst&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;gt;&amp;gt; Pushing image: ${dockerImageName}&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this approach without using unneeded Gradle plugins resulted in a an easy way to create containers on different platforms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identifying Docker container outage using Prometheus</title>
      <link>http://mpas.github.io/post/2016/11/17/20161117_identifying_docker_container_outage_using_prometheus/</link>
      <pubDate>Thu, 17 Nov 2016 16:12:14 +0200</pubDate>
      
      <guid>http://mpas.github.io/post/2016/11/17/20161117_identifying_docker_container_outage_using_prometheus/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; is a an open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.&lt;/p&gt;

&lt;p&gt;Metric data is &lt;strong&gt;pulled&lt;/strong&gt; (on a regular time-interval) from so called exporters which expose the metrics coming from applications/operating systems etc..&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;+------------------+                               +----------+     Visualize data
|  +------------+  |                               | Grafana  +---&amp;gt; coming from
|  | Dockerized |  |                               +----+-----+     Prometheus
|  | Application|  |                                    |
|  +------------+  |                                    ^
|  +------------+  |  Pull data   +----------+          |
|  |  CAdvisor  +---------&amp;gt;-------+Prometheus+----------+
|  +------------+  |              +---------++
|                  |                        |
| Operating System |                        |
|       with       |                        |
| Docker installed |                        |
|                  |                        v
+------------------+           Prometheus collects data
                               coming from remote systems
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the diagram above cAdvisor is a so called exporter. There are other exporters like e.g. &lt;a href=&#34;https://github.com/prometheus/node_exporter&#34;&gt;Node Exporter&lt;/a&gt; that exposes machine metrics. &lt;strong&gt;cAdvisor&lt;/strong&gt; is used to get Docker container metrics.&lt;/p&gt;

&lt;h2 id=&#34;cadvisor&#34;&gt;cAdvisor&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/google/cadvisor&#34;&gt;cAdvisor&lt;/a&gt; is a project coming from Google and analyzes resource usage and performance characteristics of running Docker  containers! When running a Dockerized application and starting a cAdvisor container you will have instant metrics available for all running containers.&lt;/p&gt;

&lt;p&gt;A lot of metrics are exposed by cAdvisor of which one is the metric &lt;code&gt;container_last_seen&lt;/code&gt;. You can use this metric in Prometheus to identify if a container has left the building :) The challenge with Prometheus is that it keeps the data for a specific amount of time the so called &lt;code&gt;Stale Timeout&lt;/code&gt;. This means that Prometheus will keep reporting back that the data has been received until this timeout has occurred (default 5 minutes). This is of course too much if we need to identify if a container has gone.&lt;/p&gt;

&lt;p&gt;So if you would normally query like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(container_last_seen&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;job&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;jobname&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*&amp;lt;containername&amp;gt;.*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would get results until 5 minutes.. way to far&amp;hellip;&lt;/p&gt;

&lt;p&gt;A simple alternate query to identify if the container has gone is like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(time()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;container_last_seen&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;job&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;jobname&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*&amp;lt;containername&amp;gt;.*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vector(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &amp;lsquo;30&amp;rsquo; is the time in seconds before we want to be notified if a container has gone. This time has to be larger then the pull interval for your job.&lt;/p&gt;

&lt;p&gt;When using the mentioned query you can create a nice &lt;a href=&#34;http://docs.grafana.org/reference/singlestat/&#34;&gt;Singlestat&lt;/a&gt; panel in Grafan so you can display an alert when the container is gone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accessing localhost from a Docker Container using native Docker for Mac</title>
      <link>http://mpas.github.io/post/2016/11/01/20161101_access_localhost_using_native_docker_for_mac/</link>
      <pubDate>Tue, 01 Nov 2016 19:05:44 +0100</pubDate>
      
      <guid>http://mpas.github.io/post/2016/11/01/20161101_access_localhost_using_native_docker_for_mac/</guid>
      <description>&lt;p&gt;Ever had a need to access something from within a &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; container that runs on the host system?&lt;/p&gt;

&lt;p&gt;When using native Docker on OSX you have bad luck. When configuring a container and pointing that to localhost will result in the fact the your software will be targeted at the localhost of the docker container.&lt;/p&gt;

&lt;p&gt;A solution for this isto define a new local loopback to your localhost&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo ifconfig lo0 &lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; 172.16.123.1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will define a loopback network interface that points to your localhost. When you need to access the localhost you can use this ip.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Docker RabbitMQ with predefined users/vhosts</title>
      <link>http://mpas.github.io/post/2015/06/11/20150611_docker-rabbitmq-default-users/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2015/06/11/20150611_docker-rabbitmq-default-users/</guid>
      <description>&lt;p&gt;When creating an Docker image it is nice to have predefined users and vhosts without manually having to create them after the Docker RabbitMQ image has started.&lt;/p&gt;

&lt;p&gt;The following is a Dockerfile that extends the default Docker RabbitMQ image including the Management Plugin and it creates a standard set of users / vhosts when the container is created from the image.&lt;/p&gt;

&lt;p&gt;It involves a init.sh script that is used to create the users and vhosts.&lt;/p&gt;

&lt;p&gt;The Docker File&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; rabbitmq:3-management&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Add script to create default users / vhosts&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;ADD&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; init.sh /init.sh&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Set correct executable permissions&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;RUN&lt;/span&gt; chmod +x /init.sh

&lt;span style=&#34;color: #75715e&#34;&gt;# Define default command&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; [&amp;quot;/init.sh&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The init.sh script&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/sh&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Create Default RabbitMQ setup&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; sleep &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Create users&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# rabbitmqctl add_user &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;&lt;/span&gt;
rabbitmqctl add_user test_user test_user &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Set user rights&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# rabbitmqctl set_user_tags &amp;lt;username&amp;gt; &amp;lt;tag&amp;gt;&lt;/span&gt;
rabbitmqctl set_user_tags test_user administrator &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Create vhosts&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# rabbitmqctl add_vhost &amp;lt;vhostname&amp;gt;&lt;/span&gt;
rabbitmqctl add_vhost dummy &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Set vhost permissions&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# rabbitmqctl set_permissions -p &amp;lt;vhostname&amp;gt; &amp;lt;username&amp;gt; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;&lt;/span&gt;
rabbitmqctl set_permissions -p dummy test_user &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;&lt;/span&gt;    
rabbitmq-server &lt;span style=&#34;color: #f8f8f2&#34;&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Place both of these files in a directory and build your image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t my_rabbitmq_image .
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start a container based on the image using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_rabbitmq_container&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5672&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5672&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;15672&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15672&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_rabbitmq_image&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then in your browser navigate to &lt;a href=&#34;http://localhost:15672&#34;&gt;http://localhost:15672&lt;/a&gt; and see if all is ok!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using Boot2Docker make sure to replace the localhost with the correct IP.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Docker Registry 2.0.1 using self signed certificates</title>
      <link>http://mpas.github.io/post/2015/06/05/20150605_docker-setup-registry/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2015/06/05/20150605_docker-setup-registry/</guid>
      <description>

&lt;p&gt;The new Docker Registry (2.x) has just been released and is rewritten in Go. The default installation now requires SSL security and I was looking for a way to secure the Registry using a NGINX SSL proxy where users need to provide username/password to access the registry. The setup of the NGINX proxy can be done manually but i decided to see if i can reuse the excellent images from Container Solutions to ease the installation.&lt;/p&gt;

&lt;p&gt;So the setup will be that we install the Docker Registry and proxy the SSL user access via self signed certificates using an NGINX proxy image provided by Container Solutions. &lt;a href=&#34;http://container-solutions.com/2015/04/running-secured-docker-registry-2-0/&#34;&gt;Check here for more information&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Installation of the remote docker registry will be done by using on an Amazon EC2 (Linux AMI). Currently the free tier Amazon Linux AMI 2015.03 (HVM), SSD Volume Type - ami-a10897d6. So spin up the Amazon AMI and let&amp;rsquo;s install Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when you spin up your Amazon AMI make sure to remember the FQDN/DNS name! We need this name to generate the SSL certificates!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Example:
&amp;lt;domain-name&amp;gt; = ec2-52-16-247-220.eu-west-1.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So spin up your AMI and install Docker!&lt;/p&gt;

&lt;h2 id=&#34;installing-docker&#34;&gt;Installing docker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;login into your Amazon AMI&lt;/li&gt;
&lt;li&gt;update the system and install Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum update -y
$ sudo wget -qO- https://get.docker.com/ &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;add the ec2-user to the &lt;code&gt;docker&lt;/code&gt; group (optional)&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -aG docker ec2-user
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;start Docker&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo service docker start
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make sure Docker can run the basic &amp;ldquo;hello-world&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker run hello-world
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;create-docker-registry-data-and-configuration-directories&#34;&gt;Create Docker Registry data and configuration directories&lt;/h2&gt;

&lt;p&gt;We are going to store the registry image data inside &lt;code&gt;/opt/docker/registry/data&lt;/code&gt; and configuration files such as the ssl certificates and user login inside &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create data folders for Docker Registry data and configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir -p /opt/docker/registry/data
$ sudo mkdir -p /opt/docker/registry/conf
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;run-the-docker-registry&#34;&gt;Run the Docker Registry&lt;/h2&gt;

&lt;p&gt;Now we are able to run the Docker Registry, the data for images that will be pushed are going to be stored in &lt;code&gt;/opt/docker/registry/data&lt;/code&gt; and the container will be named &lt;code&gt;docker-registry&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run the registry and name it &lt;code&gt;docker-registry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker run -d -v /opt/docker/registry/data:/tmp/registry-dev &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
--name docker-registry registry:2.0.1
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;test if the registry is actually running&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker ps
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;So now we have a running Docker Registry, but still no SSL proxy and no user accounts to get access to the registry.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;generate-self-signed-certificates-for-our-ssl-proxy&#34;&gt;Generate self signed certificates for our SSL proxy&lt;/h2&gt;

&lt;p&gt;The result of the certificate generation will be placed in &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt; and named &lt;code&gt;docker-registry.crt&lt;/code&gt; and &lt;code&gt;docker-registry.key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;docker-registry.crt&lt;/code&gt; file is important, we will need this later on to configure our local Docker client on the machine that is going to access the remote registry. So after generating the &lt;code&gt;docker-registry.crt&lt;/code&gt; file, grab this and store it on your local machine in a place where you can find it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;generate the certificates&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo openssl req -x509 -nodes -days &lt;span style=&#34;color: #ae81ff&#34;&gt;365&lt;/span&gt; -newkey rsa:2048 &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
-keyout /opt/docker/registry/conf/docker-registry.key \
-out /opt/docker/registry/conf/docker-registry.crt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Accept all defaults and make sure you give the correct FQDN /DNS name = &lt;code&gt;&amp;lt;domain-name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-passwords-for-access-to-the-docker-registry&#34;&gt;Create passwords for access to the Docker Registry&lt;/h2&gt;

&lt;p&gt;In order to let users login into the registry we need to create users  (user1/user2). This will be done by using &lt;code&gt;htpasswd&lt;/code&gt;. The user data will be stored in &lt;code&gt;docker-registry.htpasswd&lt;/code&gt; file and placed in the &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt; directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install htpasswd&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install httpd-tools -y
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;create the users&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo htpasswd -c /opt/docker/registry/conf/docker-registry.htpasswd user1
$ sudo htpasswd /opt/docker/registry/conf/docker-registry.htpasswd user2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when creating the second user omit the &lt;code&gt;-c&lt;/code&gt; otherwise the docker-registry.htpasswd file will be get overwritten!&lt;/p&gt;

&lt;h2 id=&#34;run-the-nginx-proxy&#34;&gt;Run the NGINX Proxy&lt;/h2&gt;

&lt;p&gt;As mentioned we are going to use the image from &lt;a href=&#34;http://container-solutions.com/2015/04/running-secured-docker-registry-2-0/&#34;&gt;Container Solutions&lt;/a&gt; to run our NGINX proxy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;start the NGINX proxy and name it &lt;code&gt;docker-registry-proxy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker run -d -p 443:443  &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
-e REGISTRY_HOST=&amp;quot;docker-registry&amp;quot; -e REGISTRY_PORT=&amp;quot;5000&amp;quot; -e SERVER_NAME=&amp;quot;localhost&amp;quot; \
--link docker-registry:docker-registry \
-v /opt/docker/registry/conf/docker-registry.htpasswd:/etc/nginx/.htpasswd:ro \
-v /opt/docker/registry/conf:/etc/nginx/ssl:ro \
--name docker-registry-proxy containersol/docker-registry-proxy
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this step we have a running Docker Registry which is secured using Self Signed certificates and users are able to login using their username/password.&lt;/p&gt;

&lt;p&gt;To test this navigate to your registry by using a browser (Chrome) and access: &lt;code&gt;https://&amp;lt;domain-name&amp;gt;:443/v2/&lt;/code&gt;. After accepting the security warning provide a username/password and the output should be &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configure-the-local-docker-client&#34;&gt;Configure the local Docker client&lt;/h2&gt;

&lt;p&gt;Now that we have a running secured Docker Registry we can configure the Docker client on our machine that is going to access the remote Registry. For this we need a copy of the earlier &lt;code&gt;docker-registry.crt&lt;/code&gt; file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copy the &lt;code&gt;docker-registry.crt&lt;/code&gt; file from our server to your local machine. This file is located in &lt;code&gt;/opt/docker/registry/conf&lt;/code&gt;. Put the copy in a place where you can find it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ubuntu-docker-client&#34;&gt;Ubuntu Docker Client&lt;/h3&gt;

&lt;p&gt;In order to get the local client working, we need to install Docker and register the &lt;code&gt;docker-registry.crt&lt;/code&gt; certificate file!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install docker&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo wget -qO- https://get.docker.com/ &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sh
$ sudo service docker start
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;create a directory holding our extra certificates&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir /usr/share/ca-certificates/extra
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;copy the &lt;code&gt;docker-registry.crt&lt;/code&gt; file to the directory &lt;code&gt;/usr/share/ca-certificates/extra&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;register the certificate&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo dpkg-reconfigure ca-certificates
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you are almost ready!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;restart the local Docker client&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo service docker restart
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;login onto your remote registry using&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker login &amp;lt;domain-name&amp;gt;:port
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a remote Docker Registry and the Docker Client is able to connect!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>