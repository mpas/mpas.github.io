<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on CodeVerse</title>
    <link>http://mpas.github.io/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on CodeVerse</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 16 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mpas.github.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adding WebSocket/Stomp support to a Spring Boot application</title>
      <link>http://mpas.github.io/post/2015/06/springboot-websocket-support/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2015/06/springboot-websocket-support/</guid>
      <description>&lt;p&gt;Adding support for &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSockets&lt;/a&gt; / &lt;a href=&#34;https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol&#34;&gt;Stomp&lt;/a&gt;in a &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; application has never been more easy. You can use WebSockets to receive serverside events or push data to the server using WebSockets.&lt;/p&gt;

&lt;p&gt;The following example will enable a server to send messages to a WebSocket/Stomp client.&lt;/p&gt;

&lt;p&gt;The following steps will enable Web Sockets support in a Spring Boot application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify &lt;code&gt;build.gradle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
    compile(&amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;)
    compile(&amp;quot;org.springframework.boot:spring-boot-starter-websocket&amp;quot;)
    compile(&amp;quot;org.springframework:spring-messaging&amp;quot;)
    testCompile(&amp;quot;junit:junit&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create a WebSocket configuration class that holds the configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        // the endpoint for websocket connections
        registry.addEndpoint(&amp;quot;/stomp&amp;quot;).withSockJS();
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        // use the /topic prefix for outgoing WebSocket communication
        config.enableSimpleBroker(&amp;quot;/topic&amp;quot;);

        // use the /app prefix for others
        config.setApplicationDestinationPrefixes(&amp;quot;/app&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now a client that connects to &lt;code&gt;/stomp&lt;/code&gt; endpoint is able to receive WebSocket messages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a service that is going to send the data to a WebSocket endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class ScheduleTask {

    @Autowired
    private SimpMessagingTemplate template;

    // this will send a message to an endpoint on which a client can subscribe
    @Scheduled(fixedRate = 5000)
    public void trigger() {
        // sends the message to /topic/message
        this.template.convertAndSend(&amp;quot;/topic/message&amp;quot;, &amp;quot;Date: &amp;quot; + new Date());
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create a client that is able to receive the message&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;WebSocket Stomp Receiving Example&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h3&amp;gt;Messages:&amp;lt;/h3&amp;gt;
        &amp;lt;ol id=&amp;quot;messages&amp;quot;&amp;gt;&amp;lt;/ol&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.jsdelivr.net/jquery/1.11.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        $(document).ready(function() {
            var messageList = $(&amp;quot;#messages&amp;quot;);

            // defined a connection to a new socket endpoint
            var socket = new SockJS(&#39;/stomp&#39;);

            var stompClient = Stomp.over(socket);

            stompClient.connect({ }, function(frame) {
                // subscribe to the /topic/message endpoint
                stompClient.subscribe(&amp;quot;/topic/message&amp;quot;, function(data) {
                    var message = data.body;
                    messageList.append(&amp;quot;&amp;lt;li&amp;gt;&amp;quot; + message + &amp;quot;&amp;lt;/li&amp;gt;&amp;quot;);
                });
            });
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The whole example project  can be downloaded &lt;a href=&#34;https://github.com/mpas/spring-boot-websocket-stomp-server-send-example&#34;&gt;https://github.com/mpas/spring-boot-websocket-stomp-server-send-example&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>