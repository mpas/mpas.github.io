<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spock on CodeVerse</title>
    <link>http://mpas.github.io/tags/spock/</link>
    <description>Recent content in spock on CodeVerse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Nov 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://mpas.github.io/tags/spock/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional Rest API Testing with Grails/Rest Client Builder</title>
      <link>http://mpas.github.io/post/2015/11/19/20151119-functional-rest-api-testing/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2015/11/19/20151119-functional-rest-api-testing/</guid>
      <description>Functional Rest API testing with Grails is easy and fun. We will be creating a simple Rest Controller and test it using Spock and Rest Client Builder.
When running the functional test a real container will be started on a specific port and tests are run against the running container. Just as it should be.
**Scenario:**Performing a GET request on a url (http://localhost:8080/helloworld) should return a HTTP Status 200 and data with a json payload</description>
    </item>
    
    <item>
      <title>Cleaning Grails Domain Objects in a Spock Test</title>
      <link>http://mpas.github.io/post/2015/10/30/20151030-grails-spock-clean-domain/</link>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2015/10/30/20151030-grails-spock-clean-domain/</guid>
      <description>Spock is a nice framework to execute integration tests in your Grails application. It may happen that the Spock test actually creates some domain objects and you want to clean them out on everuy single run of your feature test methods.
Spock provides a setup() and cleanup() method.
When you want to remove your domain objects after each feature test has run you can execute the following:
def setup() { .</description>
    </item>
    
    <item>
      <title>Testing constraints with Build Test Data</title>
      <link>http://mpas.github.io/post/2013/01/13/20130113-testing-constraints-with-build-test-data/</link>
      <pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://mpas.github.io/post/2013/01/13/20130113-testing-constraints-with-build-test-data/</guid>
      <description>The Spock &amp;amp; Build Test Data plugins both are wonderful additions to your toolkit if you are creating tests without getting into the hassle of constantly building up your object graph. You can focus on what you want to test!
When testing constraints on an object it can be used as follows:
class Foo { String name // name of foo  Integer age // age of foo  static constraints = { name nullable: false, blank: false // name may never be nullable or blank  age nullable: true } } And the Spock test</description>
    </item>
    
  </channel>
</rss>