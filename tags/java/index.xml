<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on CodeVerse</title>
    <link>http://mpas.github.io/tags/java/</link>
    <description>Recent content in Java on CodeVerse</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 10 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mpas.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>HTTPServletRequestWrapper for ServletInputStream 3.1</title>
            <link>http://mpas.github.io/blog/2015/06/10/httpservletrequestwrapper-for-servletinputstream-3.1/</link>
            <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2015/06/10/httpservletrequestwrapper-for-servletinputstream-3.1/</guid>
            <description>&lt;p&gt;A HttpServletRequestWrapper may be handy if you want to be able to read the HTTP Body multi times after you consume it in a filter. The ServletInputStream 3.1 changed a bit and the following methods have to be implemented.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isFinished&lt;/li&gt;
&lt;li&gt;isReady&lt;/li&gt;
&lt;li&gt;setReadListener&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;import com.google.common.primitives.Bytes;
import javax.servlet.ReadListener;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

public class AuthenticationRequestWrapper extends HttpServletRequestWrapper {

    // tag::variables[]
    private byte[] requestBody = new byte[0];
    private boolean bufferFilled = false;
    // end::variables[]

    /**
     - Constructs a request object wrapping the given request.
     *
     - @param request The request to wrap
     - @throws IllegalArgumentException if the request is null
     */
    public AuthenticationRequestWrapper(HttpServletRequest request) {
        super(request);
    }


    // tag::getRequestBody[]
    public byte[] getRequestBody() throws IOException {
        if (bufferFilled) {
            return Arrays.copyOf(requestBody, requestBody.length);
        }

        InputStream inputStream = super.getInputStream();

        byte[] buffer = new byte[102400]; // 100kb buffer

        int bytesRead;
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            requestBody = Bytes.concat(this.requestBody, Arrays.copyOfRange(buffer, 0, bytesRead)); // &amp;lt;1&amp;gt;
        }

        bufferFilled = true;

        return requestBody;
    }
    // end::getRequestBody[]

    // tag::getInputStream[]
    @Override
    public ServletInputStream getInputStream() throws IOException {
        return new CustomServletInputStream(getRequestBody()); // &amp;lt;1&amp;gt;
    }
    // end::getInputStream[]

    private static class CustomServletInputStream extends ServletInputStream {

        private ByteArrayInputStream buffer;

        public CustomServletInputStream(byte[] contents) {
            this.buffer = new ByteArrayInputStream(contents);
        }

        @Override
        public int read() throws IOException {
            return buffer.read();
        }

        @Override
        public boolean isFinished() {
            return buffer.available() == 0;
        }

        @Override
        public boolean isReady() {
            return true;
        }

        @Override
        public void setReadListener(ReadListener listener) {
            throw new RuntimeException(&amp;quot;Not implemented&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Bookreview : Instant Vert.x</title>
            <link>http://mpas.github.io/blog/2013/11/27/bookreview--instant-vert.x/</link>
            <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2013/11/27/bookreview--instant-vert.x/</guid>
            <description>&lt;p&gt;For those who have not yet got into contact with &lt;a href=&#34;http://vertx.io/&#34;&gt;Vert.x&lt;/a&gt;, the book &lt;a href=&#34;http://www.packtpub.com/development-of-asynchronous-network-applications-using-vertx/book&#34;&gt;Instant Vert.x&lt;/a&gt; (54 pages in total of which 40 pages are “real” content) is a nice introduction to the underlying concepts.&lt;/p&gt;

&lt;p&gt;As the name suggests, you can read the book in &amp;ldquo;an instant&amp;rdquo; and takes the reader through all high level concepts. The information in the book mostly stays at the concept level and provides some basic usage examples.&lt;/p&gt;

&lt;p&gt;For those who have not yet had the opportunity to learn about Vert.x, I would not immediately recommend this book. The online documentation section on Vertx.io contains the same information. But if you like a book with information nicely put into digestible chapters then this book is a good fit.&lt;/p&gt;

&lt;p&gt;Personally i hoped to get some more technical information and how-to information from this book but it is really targeted towards people that are just starting or have a beginning interest in Vert.x.&lt;/p&gt;

&lt;p&gt;Overall, I really liked the compactness and pace of the book. It is an easy read and you quickly gain knowledge on the high level concepts of Vert.x. While noted earlier you can get the information also on Vertx.io website or other places, it&amp;rsquo;s is nice to have all information aggregated in one place. This book is a good start in your journey to learn about Vert.x.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vertx.io/&#34;&gt;Go to the Vert.x website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.packtpub.com/development-of-asynchronous-network-applications-using-vertx/book&#34;&gt;Get the book at Pack Publishing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Simple Helloworld verticle</title>
            <link>http://mpas.github.io/blog/2013/05/16/simple-helloworld-verticle/</link>
            <pubDate>Thu, 16 May 2013 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2013/05/16/simple-helloworld-verticle/</guid>
            <description>&lt;p&gt;Sourcecode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package helloworld;

import org.vertx.java.core.Handler;
import org.vertx.java.core.http.HttpServerRequest;
import org.vertx.java.deploy.Verticle;

public class Server extends Verticle {

    public void start() {
        vertx.createHttpServer().requestHandler(new Handler&amp;lt;HttpServerRequest&amp;gt;() {
            public void handle(HttpServerRequest req) {
            req.response.headers().put(&amp;quot;Content-Type&amp;quot;, &amp;quot;text/html; charset-UTF-8&amp;quot;);
            req.response.end(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello from vert.x!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;);
            }
        }).listen(8080);
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Getting the Enum from a String value</title>
            <link>http://mpas.github.io/blog/2013/01/03/getting-the-enum-from-a-string-value/</link>
            <pubDate>Thu, 03 Jan 2013 00:00:00 +0000</pubDate>
            
            <guid>http://mpas.github.io/blog/2013/01/03/getting-the-enum-from-a-string-value/</guid>
            <description>&lt;p&gt;Ever asked yourself the question how you could get the Enum from a String value? This is particularly usefull when you use Enum values in your screens and pass back the value of the enum!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Enum.valueOf(YourClassName.class, &amp;quot;String Value&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.oracle.com/javase/6/docs/api/java/lang/Enum.html&#34;&gt;http://docs.oracle.com/javase/6/docs/api/java/lang/Enum.html&lt;/a&gt;&lt;/p&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
