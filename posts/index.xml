<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Marco Pas</title>
    <link>https://mpas.github.io/posts/</link>
    <description>Recent content in Posts on Marco Pas</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 30 Mar 2021 12:54:00 +0200</lastBuildDate><atom:link href="https://mpas.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Capture link from Mac app into org-mode document</title>
      <link>https://mpas.github.io/posts/2021/03/30/2021-03-30-capture-link-from-mac-app-into-org-mode-document/</link>
      <pubDate>Tue, 30 Mar 2021 12:54:00 +0200</pubDate>
      
      <guid>https://mpas.github.io/posts/2021/03/30/2021-03-30-capture-link-from-mac-app-into-org-mode-document/</guid>
      <description>To quickly grab a link from an open Mac app and use this link into an org-mode document use the following package:
Grab links from open Mac applications An optional keybind as follows:
(add-hook &amp;#39;org-mode-hook (lambda () (define-key org-mode-map (kbd &amp;#34;C-c g&amp;#34;) &amp;#39;org-mac-grab-link))) This enables you to quickly grab a link using C-c g</description>
    </item>
    
    <item>
      <title>Paste image from clipboard directly into org-mode document</title>
      <link>https://mpas.github.io/posts/2021/03/29/2021-03-29-paste-image-from-clipboard-directly-into-org-mode-document/</link>
      <pubDate>Mon, 29 Mar 2021 18:55:00 +0200</pubDate>
      
      <guid>https://mpas.github.io/posts/2021/03/29/2021-03-29-paste-image-from-clipboard-directly-into-org-mode-document/</guid>
      <description>Personally I really like using org-mode files for creating documentation and presentations. When working with screenshots my normal workflows always has been.
Capture screenshot to clipboard Save the screenshot to a relative ./images folder and give it a descriptive name. Manually create link to the screenshot This works ok but after a while you get the feel that the whole process can be automated.
The following function can help in automating the whole process.</description>
    </item>
    
    <item>
      <title>Time tracking with Org Mode and sum time per tag</title>
      <link>https://mpas.github.io/posts/2021/03/16/2021-03-16-time-tracking-with-org-mode-and-sum-time-per-tag/</link>
      <pubDate>Tue, 16 Mar 2021 10:20:00 +0100</pubDate>
      
      <guid>https://mpas.github.io/posts/2021/03/16/2021-03-16-time-tracking-with-org-mode-and-sum-time-per-tag/</guid>
      <description>&lt;p&gt;Tracking time using Org Mode is simple and easy. You can quickly create reports of the time spend on specific tasks. But how do you &lt;strong&gt;aggregate time across tasks belonging to tags&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;This can be achieved by using a simple formula and the usage of an awesome Org package called &lt;a href=&#34;https://github.com/tbanel/orgaggregate&#34;&gt;Org Aggregate&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get pretty org-bullets in Doom Emacs</title>
      <link>https://mpas.github.io/posts/2020/10/16/20201016-org-bullets-doom-emacs/</link>
      <pubDate>Fri, 16 Oct 2020 20:21:00 +0200</pubDate>
      
      <guid>https://mpas.github.io/posts/2020/10/16/20201016-org-bullets-doom-emacs/</guid>
      <description>&lt;p&gt;When installing &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;Doom Emacs&lt;/a&gt; and using org-mode the defaults bullets are `*`.
In order to get some fancy bullets the following steps need to be taken.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ranger - Show File in Path Finder</title>
      <link>https://mpas.github.io/posts/2018/11/28/20181128-ranger-show-file-in-path-finder/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2018/11/28/20181128-ranger-show-file-in-path-finder/</guid>
      <description>Ranger is a VIM-inspired filemanager for the console (https://ranger.github.io/) and can easily be installed by using brew install ranger. When working in the terminal sometimes it is nice to open the files in the default Finder app or use the excellent alternative called Path Finder. (https://cocoatech.com/#/)
To reveal your files in the Finder or Path Finder create a commands.py in ~/.config/ranger and paste the following code.
from ranger.api.commands import Command class show_files_in_path_finder(Command): &amp;#34;&amp;#34;&amp;#34; :show_files_in_path_finder Present selected files in finder &amp;#34;&amp;#34;&amp;#34; def execute(self): import subprocess files = &amp;#34;,&amp;#34;.</description>
    </item>
    
    <item>
      <title>Infrastructure and System Monitoring using Prometheus</title>
      <link>https://mpas.github.io/posts/2017/05/12/20170512-infrastructure-and-system-monitoring-using-prometheus/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2017/05/12/20170512-infrastructure-and-system-monitoring-using-prometheus/</guid>
      <description>Last week I was lucky enough to host a talk during the Devoxx (UK) on the subject of &amp;ldquo;Infrastructure and System Monitoring using Prometheus&amp;rdquo;. You can find the used material here:
Slides: https://speakerdeck.com/mpas/infrastructure-and-system-monitoring-using-prometheus Slides in PDF: https://drive.google.com/open?id=0Byx7lFSXlDU0TkJ1ZUZqdjU4MFE Code: https://github.com/mpas/infrastructure-and-system-monitoring-using-prometheus Feel free to share and distribute</description>
    </item>
    
    <item>
      <title>Dockerize your Grails application</title>
      <link>https://mpas.github.io/posts/2016/11/25/20161125-dockerize-your-grails-application/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2016/11/25/20161125-dockerize-your-grails-application/</guid>
      <description>Ever wanted to create a Docker image that contains your Grails application? You are lucky! It is easy to do so..
Let us first create a new Grails application. In the example we will create a basic application using the rest-profile.
Prerequisite : Docker is installed on your machine.
$ grails create-app docker-test --profile rest-api After the Grails application has been created, we will need to add the following files to our project.</description>
    </item>
    
    <item>
      <title>Creating/Pushing Docker images using Gradle without plugins</title>
      <link>https://mpas.github.io/posts/2016/11/24/20161124-creating-pushing-docker-images-using-gradle-without-plugins/</link>
      <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2016/11/24/20161124-creating-pushing-docker-images-using-gradle-without-plugins/</guid>
      <description>In our current project we where heavily focussed on the usage of Gradle plugins to create Docker images. We used plugins to create the images and push them to our AWS ECR repositories. When using these plugins we hit various bugs related to the fact that not all developers where using Linux operating systems to test our their containers. At the end we took a look on how we could create those images without using additional plugins.</description>
    </item>
    
    <item>
      <title>Identifying Docker container outage using Prometheus</title>
      <link>https://mpas.github.io/posts/2016/11/17/20161117-identifying-docker-container-outage-using-prometheus/</link>
      <pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2016/11/17/20161117-identifying-docker-container-outage-using-prometheus/</guid>
      <description>Prometheus is a an open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.
Metric data is pulled (on a regular time-interval) from so called exporters which expose the metrics coming from applications/operating systems etc..
+------------------+ +----------+ Visualize data | +------------+ | | Grafana +---&amp;gt; coming from | | Dockerized | | +----+-----+ Prometheus | | Application| | | | +------------+ | ^ | +------------+ | Pull data +----------+ | | | CAdvisor +---------&amp;gt;-------+Prometheus+----------+ | +------------+ | +---------++ | | | | Operating System | | | with | | | Docker installed | | | | v +------------------+ Prometheus collects data coming from remote systems In the diagram above cAdvisor is a so called exporter.</description>
    </item>
    
    <item>
      <title>Building a Consul cluster using Terraform/AWS</title>
      <link>https://mpas.github.io/posts/2016/11/16/20161116-building-a-consul-cluster-using-terraform-aws/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2016/11/16/20161116-building-a-consul-cluster-using-terraform-aws/</guid>
      <description>Service Discovery Health Checking Key/Value Store Multi Datacenter For more information on Consul itself please have a look in the excellent documentation.
Consul Intro Consul documentation Is it really easy? Setting up a Consul cluster seems easy, just follow the many tutorials out there and you will have a Consul cluster running in a few steps on your local machine&amp;hellip;
But hey.. what if you need to deploy this cluster on an AWS environment?</description>
    </item>
    
    <item>
      <title>Change the port of actuator endpoint in a Grails application</title>
      <link>https://mpas.github.io/posts/2016/11/02/20161101-change-the-port-of-actuator-endpoint/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2016/11/02/20161101-change-the-port-of-actuator-endpoint/</guid>
      <description>When using actuator endpoints to expose metrics in a Grails (Spring Boot) application, it may be useful to run the metrics on a different port.
This enables you to hide the metrics for the public and use the different port in an AWS infrastucture so that the metrics are only available internal.
Let us first enable the actuator endpoints
// File: grails-app/conf/application.yml # Spring Actuator Endpoints are Disabled by Default endpoints: enabled: true jmx: enabled: true Change the port on which the metrics runs, add the lines below to the appl</description>
    </item>
    
    <item>
      <title>Accessing localhost from a Docker Container using native Docker for Mac</title>
      <link>https://mpas.github.io/posts/2016/11/01/20161101-access-localhost-using-native-docker-for-mac/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2016/11/01/20161101-access-localhost-using-native-docker-for-mac/</guid>
      <description>Ever had a need to access something from within a Docker container that runs on the host system?
When using native Docker on OSX you have bad luck. When configuring a container and pointing that to localhost will result in the fact the your software will be targeted at the localhost of the docker container.
A solution for this isto define a new local loopback to your localhost
$ sudo ifconfig lo0 alias 172.</description>
    </item>
    
    <item>
      <title>Terraform to the rescue</title>
      <link>https://mpas.github.io/posts/2016/10/09/20161009-terraform-to-the-rescue/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2016/10/09/20161009-terraform-to-the-rescue/</guid>
      <description>Getting exposed to Amazon Web Services is fun! Certainly when you see that the infrastructure is growing and supporting the daily need of developers and the business. You slowly start adding services and try to keep everything in a state so that it is repeatable and maintainable. At a certain moment it becomes clear that you need the concept of Infrastructure As Code.
The Amazon way of doing this is by using AWS CloudFormation.</description>
    </item>
    
    <item>
      <title>Functional Rest API Testing with Grails/Rest Client Builder</title>
      <link>https://mpas.github.io/posts/2015/11/19/20151119-functional-rest-api-testing/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/11/19/20151119-functional-rest-api-testing/</guid>
      <description>Functional Rest API testing with Grails is easy and fun. We will be creating a simple Rest Controller and test it using Spock and Rest Client Builder.
When running the functional test a real container will be started on a specific port and tests are run against the running container. Just as it should be.
Scenario: Performing a GET request on a url (http://localhost:8080/helloworld) should return a HTTP Status 200 and data with a json payload</description>
    </item>
    
    <item>
      <title>Using DavMail Gateway as a mail proxy for Microsoft Exchange (OWA)</title>
      <link>https://mpas.github.io/posts/2015/11/17/20151117-davmail/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/11/17/20151117-davmail/</guid>
      <description>If you find yourself into a situation where you have a need for non Microsoft mail client that needs support for Microsoft Exchange then you are often out of luck. In my case I needed Exchange support for the terrific PostBox mail client.
As for now PostBox does not support Microsoft Exhange natively so the hunt starts on how to get Exchange working. As it stands most companies also enable Exchange Web Access (or Outlook Web Access [OWA]) so maybe we can use that to feed our native mail client.</description>
    </item>
    
    <item>
      <title>Cleaning Grails Domain Objects in a Spock Test</title>
      <link>https://mpas.github.io/posts/2015/10/30/20151030-grails-spock-clean-domain/</link>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/10/30/20151030-grails-spock-clean-domain/</guid>
      <description>Spock is a nice framework to execute integration tests in your Grails application. It may happen that the Spock test actually creates some domain objects and you want to clean them out on everuy single run of your feature test methods.
Spock provides a setup() and cleanup() method.
When you want to remove your domain objects after each feature test has run you can execute the following:
def setup() { .</description>
    </item>
    
    <item>
      <title>Adding WebSocket/Stomp support to a Spring Boot application</title>
      <link>https://mpas.github.io/posts/2015/06/16/20150616-springboot-websocket-support/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/06/16/20150616-springboot-websocket-support/</guid>
      <description>&lt;p&gt;Adding support for &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSockets&lt;/a&gt; / &lt;a href=&#34;https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol&#34;&gt;Stomp&lt;/a&gt; in a &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; application has never been more easy. You can use WebSockets to receive serverside events or push data to the server using WebSockets.&lt;/p&gt;
&lt;p&gt;The following example will enable a server to send messages to a WebSocket/Stomp client.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Run a Grails 3 generated Fat Jar file in production mode</title>
      <link>https://mpas.github.io/posts/2015/06/11/20150611-run-grails-war-in-production-mode/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/06/11/20150611-run-grails-war-in-production-mode/</guid>
      <description>When creating a Grails WAR/JAR file using:
$ grails war The resulting artifact can be run in production mode using:
$ java -Dgrails.env=prod -Dserver.port=9000 -jar &amp;lt;name-of-jar-file&amp;gt;.jar </description>
    </item>
    
    <item>
      <title>Setting up Docker RabbitMQ with predefined users/vhosts</title>
      <link>https://mpas.github.io/posts/2015/06/11/20150611-docker-rabbitmq-default-users/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/06/11/20150611-docker-rabbitmq-default-users/</guid>
      <description>When creating an Docker image it is nice to have predefined users and vhosts without manually having to create them after the Docker RabbitMQ image has started.
The following is a Dockerfile that extends the default Docker RabbitMQ image including the Management Plugin and it creates a standard set of users / vhosts when the container is created from the image.
It involves a init.sh script that is used to create the users and vhosts.</description>
    </item>
    
    <item>
      <title>HTTPServletRequestWrapper for ServletInputStream 3.1</title>
      <link>https://mpas.github.io/posts/2015/06/10/20150610-httpservletwrapper-3.1/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/06/10/20150610-httpservletwrapper-3.1/</guid>
      <description>A HttpServletRequestWrapper may be handy if you want to be able to read the HTTP Body multi times after you consume it in a filter. The ServletInputStream 3.1 changed a bit and the following methods have to be implemented.
isFinished isReady setReadListener import com.google.common.primitives.Bytes; import javax.servlet.ReadListener; import javax.servlet.ServletInputStream; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletRequestWrapper; import java.io.ByteArrayInputStream; import java.io.IOException; import java.io.InputStream; import java.util.Arrays; public class AuthenticationRequestWrapper extends HttpServletRequestWrapper { // tag::variables[] private byte[] requestBody = new byte[0]; private boolean bufferFilled = false; // end::variables[] /** - Constructs a request object wrapping the given request.</description>
    </item>
    
    <item>
      <title>Installing Docker Registry 2.0.1 using self signed certificates</title>
      <link>https://mpas.github.io/posts/2015/06/05/20150605-docker-setup-registry/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2015/06/05/20150605-docker-setup-registry/</guid>
      <description>The new Docker Registry (2.x) has just been released and is rewritten in Go. The default installation now requires SSL security and I was looking for a way to secure the Registry using a NGINX SSL proxy where users need to provide username/password to access the registry. The setup of the NGINX proxy can be done manually but i decided to see if i can reuse the excellent images from Container Solutions to ease the installation.</description>
    </item>
    
    <item>
      <title>Upgrading from Grails 2.3.8 to 2.4.2</title>
      <link>https://mpas.github.io/posts/2014/07/04/20140724-upgrade-grails-2.4.2/</link>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2014/07/04/20140724-upgrade-grails-2.4.2/</guid>
      <description>When upgrading to Grails 2.4.2 i ran into an issue where the following error message would pop up.
Error creating bean with name &amp;#39;grailsApplication&amp;#39; defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean &amp;#39;grailsResourceLoader&amp;#39; while setting bean property &amp;#39;grailsResourceLoader&amp;#39;; To solve this issue you need to delete some lines in the &amp;lt;grails-app&amp;gt;/web-app/WEB-INF/applicationContext.xml file.
Delete the following lines:
&amp;lt;property name=&amp;#34;grailsResourceLoader&amp;#34; ref=&amp;#34;grailsResourceLoader&amp;#34; /&amp;gt; &amp;lt;bean id=&amp;#34;grailsResourceLoader&amp;#34; class=&amp;#34;org.codehaus.groovy.grails.commons.GrailsResourceLoaderFactoryBean&amp;#34; /&amp;gt; And you should be up and running quickly.</description>
    </item>
    
    <item>
      <title>Skip a contenttype/section to be renderend</title>
      <link>https://mpas.github.io/posts/2014/06/09/20140609-hugo-skip-certain-content-to-be-rendered/</link>
      <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2014/06/09/20140609-hugo-skip-certain-content-to-be-rendered/</guid>
      <description>When creating a layout it may occur that you want to skip rendering certain types of content, or render only specific content in a part of your layout.
Example: You want to only render contenttype &amp;lsquo;post&amp;rsquo; use the following code in your template:
{{ if eq .Type &amp;#34;post&amp;#34; }} {{ .Title }} {{ .Content }} {{ end }} </description>
    </item>
    
    <item>
      <title>Bookreview : Instant Vert.x</title>
      <link>https://mpas.github.io/posts/2013/11/27/20131127-bookreview-instant-vertx/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/11/27/20131127-bookreview-instant-vertx/</guid>
      <description>For those who have not yet got into contact with Vert.x, the book Instant Vert.x (54 pages in total of which 40 pages are “real” content) is a nice introduction to the underlying concepts.
As the name suggests, you can read the book in &amp;ldquo;an instant&amp;rdquo; and takes the reader through all high level concepts. The information in the book mostly stays at the concept level and provides some basic usage examples.</description>
    </item>
    
    <item>
      <title>Use backspace key to go back in Google Chrome</title>
      <link>https://mpas.github.io/posts/2013/05/30/20130530-backspace-mint/</link>
      <pubDate>Thu, 30 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/05/30/20130530-backspace-mint/</guid>
      <description>When using Chrome (in Linux Mint) and pressing the backspace key nothing happens. You would expect to go back to the previous url you have visited. To enable the default behaviour you could install the following extension:
https://chrome.google.com/webstore/detail/backspace-as-backforward/aeffggjddcchloadflonilaahpclmbnm?hl=en </description>
    </item>
    
    <item>
      <title>Automount NTFS volume under Linux (Mint)</title>
      <link>https://mpas.github.io/posts/2013/05/28/20130528-automount-ntfs-mint/</link>
      <pubDate>Tue, 28 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/05/28/20130528-automount-ntfs-mint/</guid>
      <description>When automounting an NTFS volume under Linux (Mint) you can do this using the /etc/fstab file. dummy dummy dummy
$ sudo pico /etc/fstab Add a line in the /etc/fstab file:
# custom mount point /dev/sdb1 /media/windows-c ntfs-3g defaults 0 0 And take the mount into effect.
$ mount -a </description>
    </item>
    
    <item>
      <title>Using Grails to power your Electric Car</title>
      <link>https://mpas.github.io/posts/2013/05/25/20130525-grails-to-power-your-electric-car/</link>
      <pubDate>Sat, 25 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/05/25/20130525-grails-to-power-your-electric-car/</guid>
      <description>Past week I really enjoyed visiting &amp;amp; speaking at the Grails Conference (GR8Conf 2013). The organisation made it possible that for me to host a talk about &amp;ldquo;Using Grails to power your Electric Car&amp;rdquo;.
Using Grails to power your Electric Car</description>
    </item>
    
    <item>
      <title>Google Chrome not synchronizing extensions</title>
      <link>https://mpas.github.io/posts/2013/05/24/20130524-chrome-not-synchronizing-extensions/</link>
      <pubDate>Fri, 24 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/05/24/20130524-chrome-not-synchronizing-extensions/</guid>
      <description>When installing a fresh version of Chrome it may occur that all Bookmarks sync ok but the extensions not. The following solution worked for my system.
Open Google Chrome Goto &amp;ldquo;Settings&amp;rdquo; Open &amp;ldquo;Advanced Settings&amp;rdquo; Check &amp;ldquo;Developer mode&amp;rdquo; Press &amp;ldquo;Update extensions now&amp;rdquo; </description>
    </item>
    
    <item>
      <title>Simple Helloworld verticle</title>
      <link>https://mpas.github.io/posts/2013/05/16/20130516-simple-helloworld-verticle/</link>
      <pubDate>Thu, 16 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/05/16/20130516-simple-helloworld-verticle/</guid>
      <description>Sourcecode:
package helloworld; import org.vertx.java.core.Handler; import org.vertx.java.core.http.HttpServerRequest; import org.vertx.java.deploy.Verticle; public class Server extends Verticle { public void start() { vertx.createHttpServer().requestHandler(new Handler&amp;lt;HttpServerRequest&amp;gt;() { public void handle(HttpServerRequest req) { req.response.headers().put(&amp;#34;Content-Type&amp;#34;, &amp;#34;text/html; charset-UTF-8&amp;#34;); req.response.end(&amp;#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello from vert.x!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;); } }).listen(8080); } } </description>
    </item>
    
    <item>
      <title>Grails migrations and &#39;Waiting for changelog lock&#39;</title>
      <link>https://mpas.github.io/posts/2013/02/28/20130228-grails-migrations-and-waiting-for-changelog/</link>
      <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/02/28/20130228-grails-migrations-and-waiting-for-changelog/</guid>
      <description>Sometimes it may happen that the automatic migrations in a Grails project may come to a hold due to the fact that Liquibase keeps waiting for a changelog lock. At the end this will result in a application that is not going to be deployed.
... Waiting for changelog lock.... Waiting for changelog lock.... Waiting for changelog lock.... ... To solve this take the following steps:
Stop the application container (example: Tomcat) In the database look for a table called DATABASECHANGELOGLOCK In the table there is a record with id=1, change the following values: locked -&amp;gt; 0 lockgranted -&amp;gt; null lockedby -&amp;gt; null After updating this record start the application container Notes:</description>
    </item>
    
    <item>
      <title>Testing constraints with Build Test Data</title>
      <link>https://mpas.github.io/posts/2013/01/13/20130113-testing-constraints-with-build-test-data/</link>
      <pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/01/13/20130113-testing-constraints-with-build-test-data/</guid>
      <description>The Spock &amp;amp; Build Test Data plugins both are wonderful additions to your toolkit if you are creating tests without getting into the hassle of constantly building up your object graph. You can focus on what you want to test!
When testing constraints on an object it can be used as follows:
class Foo { String name // name of foo Integer age // age of foo static constraints = { name nullable: false, blank: false // name may never be nullable or blank age nullable: true } } And the Spock test</description>
    </item>
    
    <item>
      <title>Getting the Enum from a String value</title>
      <link>https://mpas.github.io/posts/2013/01/03/20130103-getting-enum-from-string-value/</link>
      <pubDate>Thu, 03 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2013/01/03/20130103-getting-enum-from-string-value/</guid>
      <description>Ever asked yourself the question how you could get the Enum from a String value? This is particularly usefull when you use Enum values in your screens and pass back the value of the enum!
Enum.valueOf(YourClassName.class, &amp;#34;String Value&amp;#34;) http://docs.oracle.com/javase/6/docs/api/java/lang/Enum.html</description>
    </item>
    
    <item>
      <title>Troubles getting vsftpd user logged in?</title>
      <link>https://mpas.github.io/posts/2012/09/18/20120918-troubles-getting-vsftpd-user-logged-in/</link>
      <pubDate>Tue, 18 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/18/20120918-troubles-getting-vsftpd-user-logged-in/</guid>
      <description>Recently i had the pleasure of installing and using vsftp on a Ubuntu Linux 12.04 system. I closely followed the instructions but keeped getting my head banging against a wall with an error message: 500 OOPS: vsftpd: refusing to run with writable root inside chroot()
After some googling around i found the following fix.. chmod the folder that the ftp user comes in to as he first login (root folder) by using in terminal:</description>
    </item>
    
    <item>
      <title>Loading Grails configuration files update!</title>
      <link>https://mpas.github.io/posts/2012/09/17/20120917-grails-load-external-configuration-files-update/</link>
      <pubDate>Mon, 17 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/17/20120917-grails-load-external-configuration-files-update/</guid>
      <description>We recently changed the way how we load configuration files in a Grails project. Normally we to use the .properties file format, but this has some serious disadvantages.
You cannot deal with all Grails Mail settings in the configuration file You cannot use the log4j DSL to extract the logging configuration outside your application etc.. In our hunt for a good way to load configuration files we asked question on the mailinglist and also found this blogpost which was the start for our implementation of loading the external configuration files.</description>
    </item>
    
    <item>
      <title>Loading external Configuration files in a Grails application</title>
      <link>https://mpas.github.io/posts/2012/09/16/20120916-grails-load-external-configuration-files/</link>
      <pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/16/20120916-grails-load-external-configuration-files/</guid>
      <description>The use of &amp;lsquo;Config.groovy&amp;rsquo; as a placeholder for configuration settings is nice, but not always sufficient. The &amp;lsquo;Config.groovy&amp;rsquo; file will get compiled and packaged inside the WAR file you are creating. If you want to externalize the configuration and have a need to configure settings outside the deployed (WAR file) application you can use property files (.properties) to achieve that.
A simple mechanism to load these property files is to place a short snippet of code in the &amp;lsquo;Config.</description>
    </item>
    
    <item>
      <title>Combining ImageMagick and Grails</title>
      <link>https://mpas.github.io/posts/2012/09/15/20120915-grails-and-imagemagick/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/15/20120915-grails-and-imagemagick/</guid>
      <description>When there is a need to work with images (thumbnailing, watermark, resize etc.) there is always ImageMagick that comes to the rescue. Combining this image utility powerhouse with the Grails framework is a task which can be easily accomplished.
Steps:
Install ImageMagick according to the installation instructions. It contains a utility called convert which we will need later on! This utility takes care of the conversion of images to thumbnails, watermarks etc.</description>
    </item>
    
    <item>
      <title>Installing Vimball plugins when using Pathogen</title>
      <link>https://mpas.github.io/posts/2012/09/14/20120914-installing-vimball-plugins-using-pathogen/</link>
      <pubDate>Fri, 14 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/14/20120914-installing-vimball-plugins-using-pathogen/</guid>
      <description>No need to discuss that Vim is truly a great text editor. Wealth of features, great speed and extensive support for plugins. The installation of plugins is very easy. If you want to learn how to install plugins, make sure to check out the wiki.
Pathogen When you instal a plugin one may copy the files to the plugin directory. In a later stage you also want to delete a plugin and then the hunt for files starts.</description>
    </item>
    
    <item>
      <title>Installing Markdown on OSX and use it inside VIM</title>
      <link>https://mpas.github.io/posts/2012/09/13/20120913-installing-markdown-on-osx-use-it-inside-vim/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/13/20120913-installing-markdown-on-osx-use-it-inside-vim/</guid>
      <description>Back again to one of my favorites which is called Markdown. Once every now and then i forget how easy it is. Normally i use Textmate to do all my writing, but recently i have picked up VIM to do some editing etc. Why i did chose VIM? I will not trouble you with that decision :)
Using Textmate everything is easy, but when you want to use Markdown inside VIM it is somewhat different.</description>
    </item>
    
    <item>
      <title>Introduction to Groovy &amp; Grails</title>
      <link>https://mpas.github.io/posts/2012/09/12/20120912-introduction-groovy-and-grails/</link>
      <pubDate>Wed, 12 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/12/20120912-introduction-groovy-and-grails/</guid>
      <description>Recently i had the opportunity to show an exciting crowd a presentation about Groovy &amp;amp; Grails.
This happend during the Devnology Community Event at Baarn. If you want to view the presentation &amp;ndash;&amp;gt; check it out here!</description>
    </item>
    
    <item>
      <title>Change default homepage for a Grails application</title>
      <link>https://mpas.github.io/posts/2012/09/11/20120911-grails-change-default-homepage/</link>
      <pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/11/20120911-grails-change-default-homepage/</guid>
      <description>You can set the default homepage for a Grails application by modifying the grails-app/conf/UrlMappings.groovy file. In a new Grails application this file will look like
class UrlMappings { static mappings = { &amp;#34;/$controller/$action?/$id?&amp;#34;{ constraints { // apply constraints here } } &amp;#34;/&amp;#34;(view:&amp;#34;/index&amp;#34;) &amp;#34;500&amp;#34;(view:&amp;#39;/error&amp;#39;) } } Replace the line:
&amp;#34;/&amp;#34;(view:&amp;#34;/index&amp;#34;) with:
&amp;#34;/&amp;#34;(controller:&amp;#39;home&amp;#39;, action:&amp;#34;/index&amp;#34;) This will result in the fact that when you start your Grails application and you enter the URL for your application it will trigger the HomeController and corresponding index action related to that controller.</description>
    </item>
    
    <item>
      <title>Funcional Code Coverage using Cobertura</title>
      <link>https://mpas.github.io/posts/2012/09/10/20120910-functional-code-coverage-using-cobertura/</link>
      <pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/10/20120910-functional-code-coverage-using-cobertura/</guid>
      <description>So assume you are assigned to a JEE/Web project with no written functional requirements, no technical design, no functional and unit tests and even no business process description. Sounds really hopeless, but it is your responsibility to learn the system and make adjustments to it. Does this sound familiar?? Hopefully not :) But every now and then this scenario seems to happen.
One can start to complain :), stop working on the project or even better master the concept of Software Archeology.</description>
    </item>
    
    <item>
      <title>Distributed Deployment with Hudson &amp; SSH</title>
      <link>https://mpas.github.io/posts/2012/09/09/20120909-distributed-deployment-with-hudson-and-ssh/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/09/20120909-distributed-deployment-with-hudson-and-ssh/</guid>
      <description>Have you already implemented an multi-server artifact deployment using a Continuous Integration Engine? If not, then read ahead and maybe this article is of help.
The need for Continuous Integration A good practice in a software development methodology and lifecycle is the use of a Continuous Integration Engine. The adoption of Continuous Integration improves you software quality by quickly reporting failed builds so you can modify/correct your code. Popular Continuous Integration Engines can often be extended with software quality tooling so you can report on specific quality aspect of your software.</description>
    </item>
    
    <item>
      <title>Using MySQL instead of in-memory database for a Grails application</title>
      <link>https://mpas.github.io/posts/2012/09/05/20120905-grails-replace-in-memory-db-with-mysql/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://mpas.github.io/posts/2012/09/05/20120905-grails-replace-in-memory-db-with-mysql/</guid>
      <description>A Grails application by default uses a in-memory HSQL database. To switch to a MySQL database the steps are simple and straightforward.
Download the MySQL JDBC driver [called a connector] from the MySQL website Extract the zip or tar archive Copy the driver (at this time of writing called mysql-connector-java-5.1.13-bin.jar into the grails-app/lib directory Configure your application datasource in file grails-app/conf/DataSource.groovy development { dataSource { dbCreate = &amp;#34;create-drop&amp;#34; // one of &amp;#39;create&amp;#39;, &amp;#39;create-drop&amp;#39;,&amp;#39;update&amp;#39; url = &amp;#34;jdbc:mysql://localhost:&amp;lt;port&amp;gt;/&amp;lt;database&amp;gt;&amp;#34; driverClassName = &amp;#34;com.</description>
    </item>
    
  </channel>
</rss>
